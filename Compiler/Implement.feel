<- Compiler

-> {
    Antlr4.Runtime
    Antlr4.Runtime.Misc
    System
    System.Collections.Generic

    . = Compiler.FeelParser
    . = Compiler.Compiler_static
}


FeelLangVisitor = $ me {
    .VisitImplementStatement = (context : ImplementStatementContext -> v : Any) {
        id = Visit(context.id()) ! Result
        
        obj = ""
        extend = (Str)List{}
        context.packageFieldStatement() <> nil ? {
            item = context.packageFieldStatement()
            r = Visit(item) ! Result
            obj += r.text
        }
        context.packageNewStatement() <> nil ? {
            item = context.packageNewStatement()
            r = Visit(item) ! Str
            obj += "public \{id.text} \{r}"
        }
        obj += BlockRight + Wrap
        header = ""
        header += "\{id.permission} partial class \{id.text}"

        template = ""
        template_contract = ""
        context.templateDefine() <> nil ? {
            item = Visit(context.templateDefine()) ! TemplateItem
            template += item.template
            template_contract = item.contract
            header += template
        }

        extend.Size() > 0 ? {
            temp = extend[0]
            1 .. extend.Size() @ i {
                temp += "," + extend[i]
            }
            header += ":" + temp
        }

        header += template_contract + BlockLeft + Wrap
        obj = header + obj
        me.self_ID = ""
        me.super_ID = ""
        <- obj
    }
       
    .VisitOverrideFunctionStatement = (context : OverrideFunctionStatementContext -> v : Any) {
        id = Visit(context.id()) ! Result
        is_virtual = " override "
        obj = ""
        pout = ""
        context.parameterClauseOut() == nil ? {
            pout = "void"
        }
        | ? {
            pout = Visit(context.parameterClauseOut()) ! Str
            context.t.Type == Right_Flow ? {
                pout <> "void" ? {
                    pout = "\{Task}<\{pout}>"
                }
                | ? {
                    pout = Task
                }
            }
        }
        obj += "\{is_virtual} \{pout} \{id.text}"
        
        template_contract = ""
        context.templateDefine() <> nil ? {
            template = Visit(context.templateDefine()) ! TemplateItem
            obj += template.template
            template_contract = template.contract
        }
        me.Add_current_set()
        me.Add_func_stack()
        obj += Visit(context.parameterClauseIn()) + template_contract + BlockLeft + Wrap
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.Delete_current_set()
        obj += BlockRight + Wrap

        Get_func_async() ? {
            obj = " async " + obj
        }
        me.Delete_func_stack()
        context.n <> nil ? {
            obj = "protected " + obj
        }
        | ? {
            obj = "\{id.permission} " + obj
        }
        <- obj
    }
}
