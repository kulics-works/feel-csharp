<- Compiler

-> {
    Antlr4.Runtime
    Antlr4.Runtime.Misc
    System
    System.Collections.Generic

    _ := Compiler.FeelParser
    _ := Compiler.Compiler_static
}

FeelLangVisitor := $ me {
    .VisitJudgeCaseStatement := (context: JudgeCaseStatementContext -> v: any)  {
        !obj := ""
        expr := Visit(context.expression())!: Result
        obj += "switch (${expr.text}) ${BlockLeft; Wrap}"
        context.caseStatement() @ item {
            r := Visit(item)!: str
            obj += r + Wrap
        }
        context.caseElseStatement() >< nil ? {
            obj += Visit(context.caseElseStatement())!: str + Wrap
        }
        obj += BlockRight+Wrap
        <- obj
    }

    .VisitJudgeCase := (context: JudgeCaseContext -> v: any) {
        !obj := ""
        context.expression() >< nil ? {
            expr := Visit(context.expression())!: Result
            obj = "case ${expr.text} :${Wrap}"
        } context.typeType() >< nil ? {
            !id := "it"
            context.id() >< nil ? {
                id = (Visit(context.id())!: Result).text
            }
            me.add_id(id)
            type := Visit(context.typeType())!: str
            obj = "case ${type} ${id} :${Wrap}"
        } _ {
            obj = "default:${Wrap}"
        }
        <- obj
    }

    .VisitCaseStatement := (context: CaseStatementContext -> v: any) {
        !obj := ""
        me.add_current_set()
        !process := "${BlockLeft} ${ProcessFunctionSupport(context.functionSupportStatement()); BlockRight} break;"
        me.delete_current_set()
        context.judgeCase() @ item {
            r := Visit(item)!: str
            obj += r + process
        }
        <- obj
    }

    .VisitCaseElseStatement := (context: CaseElseStatementContext -> v: any) {
        !obj := ""
        me.add_current_set()
        !process := "${BlockLeft} ${ProcessFunctionSupport(context.functionSupportStatement()); BlockRight} break;"
        me.delete_current_set()
        obj += "default:" + Wrap + process
        <- obj
    }

    .VisitJudgeStatement := (context: JudgeStatementContext -> v: any) {
        !obj := ""
        obj += Visit(context.judgeIfStatement())
        context.judgeElseIfStatement() @ it {
            obj += Visit(it)
        }
        context.judgeElseStatement() >< nil ? {
            obj += Visit(context.judgeElseStatement())
        }
        <- obj
    }

    .VisitJudgeIfStatement := (context: JudgeIfStatementContext -> v: any) {
        b := Visit(context.expression())!: Result
        !obj := "if ( ${b.text} ) ${BlockLeft; Wrap}"
        me.add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight+Wrap
        <- obj
    }

    .VisitJudgeElseIfStatement := (context: JudgeElseIfStatementContext -> v: any) {
        b := Visit(context.expression())!: Result
        !obj := "else if ( ${b.text} ) ${BlockLeft; Wrap}"
        me.add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight+Wrap
        <- obj
    }

    .VisitJudgeElseStatement := (context: JudgeElseStatementContext -> v: any) {
        !obj := "else ${BlockLeft; Wrap}"
        me.add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight+Wrap
        <- obj
    }

    .VisitJudgeExpression := (context: JudgeExpressionContext -> v: any) {
        fn: (str->Result) = { expr ->
            r := Result{}
            r.data = "var"
            r.text = "run(()=> " + BlockLeft + " if ("
            r.text += expr
            r.text += Visit(context.judgeIfExpression())
            context.judgeElseIfExpression() @ it {
                r.text += Visit(it)
            }
            r.text += Visit(context.judgeElseExpression())
            r.text += BlockRight + ")"
            <- r
        }
        <- fn
    }

    .VisitJudgeIfExpression := (context: JudgeIfExpressionContext -> v: any) {
        !obj := " ) ${BlockLeft; Wrap}"
        me.add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        obj += "return ${ (Visit(context.tupleExpression())!: Result).text };"
        me.delete_current_set()
        obj += BlockRight + Wrap
        <- obj
    }

    .VisitJudgeElseIfExpression := (context: JudgeElseIfExpressionContext -> v: any) {
        b := Visit(context.expression())!: Result
        !obj := "else if ( ${b.text} ) ${BlockLeft; Wrap}"
        me.add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        obj += "return ${ (Visit(context.tupleExpression())!: Result).text };"
        me.delete_current_set()
        obj += BlockRight + Wrap
        <- obj
    }

    .VisitJudgeElseExpression := (context: JudgeElseExpressionContext -> v: any) {
        !obj := "else ${BlockLeft; Wrap}"
        me.add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        obj += "return ${ (Visit(context.tupleExpression())!: Result).text };"
        me.delete_current_set()
        obj += BlockRight + Wrap
        <- obj
    }

    .VisitJudgeCaseExpression := (context: JudgeCaseExpressionContext -> v: any)  {
        r := Result{}
        expr := Visit(context.expression())!: Result
        r.text = "run(()=> { switch (${expr.text}) "
        r.text += BlockLeft+Wrap
        context.caseExpression() @ item {
            temp := Visit(item)!: str
            r.text += temp + Wrap
        }
        r.text += Visit(context.caseElseExpression())!: str
        r.text += BlockRight + Wrap + "})"
        <- r
    }

    .VisitCaseExpression := (context: CaseExpressionContext -> v: any) {
        !obj := ""
        context.judgeCase() @ item {
            r := Visit(item)!: str
            me.add_current_set()
            !process := BlockLeft + ProcessFunctionSupport(context.functionSupportStatement())
            process += "return ${ (Visit(context.tupleExpression())!: Result).text };"
            process += "${ BlockRight }break;"
            me.delete_current_set()
            obj += r + process
        }
        <- obj
    }

    .VisitCaseElseExpression := (context: CaseElseExpressionContext -> v: any) {
        !obj := ""
        me.add_current_set()
        !process := BlockLeft + ProcessFunctionSupport(context.functionSupportStatement())
        process += "return ${ (Visit(context.tupleExpression())!: Result).text };"
        process += "${ BlockRight }break;"
        me.delete_current_set()
        obj += "default:" + Wrap + process
        <- obj
    }
}
