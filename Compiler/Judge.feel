# Compiler

# {
    Antlr4.Runtime
    Antlr4.Runtime.Misc
    System
    System.Collections.Generic

    Compiler.FeelParser => .
    Compiler.Compiler_static => .
}

FeelLangVisitorJudge := $ () {
    FeelLangVisitorImplement

    .VisitJudgeMatchStatement := (context : JudgeMatchStatementContext -> v : Any)  {
        obj := ""
        expr := Visit(context.expression()).[Result]
        obj += "switch (\{expr.text}) \{BlockLeft, Wrap}"
        @ it := context.caseEqualStatement()... {
            obj += Visit(it).[Str] + Wrap
        }
        @ it := context.caseTypeStatement()... {
            obj += Visit(it).[Str] + Wrap
        }
        ? context.caseElseStatement() <> nil {
            obj += Visit(context.caseElseStatement()).[Str] + Wrap
        }
        obj += BlockRight + Wrap
        <- obj
    }

    .VisitJudgeEqualCase := (context : JudgeEqualCaseContext -> v : Any) {
        obj := ""
        expr := Visit(context.expression()).[Result]
        obj = "case \{expr.text} :\{Wrap}"
        <- obj
    }

    .VisitJudgeTypeCase := (context : JudgeTypeCaseContext -> v : Any) {
        obj := ""
        id := "it"
        ? context.id() <> nil {
            id = Visit(context.id()).[Result].text
        }
        Add_ID(id)
        type_data := Visit(context.typeType()).[Str]
        obj = "case \{type_data} \{id} :\{Wrap}"
        <- obj
    }

    .VisitCaseEqualStatement := (context : CaseEqualStatementContext -> v : Any) {
        obj := ""
        Add_current_set()
        rList := List[Str]$()
        @ item := context.judgeEqualCase()... {
            r := Visit(item).[Str]
            rList.Append(r)
        }
        process := "\{BlockLeft} \{ProcessFunctionSupport(context.functionSupportStatement()), BlockRight} break;"
        @ r := rList... {
            obj += r + process
        }
        Delete_current_set()
        <- obj
    }

    .VisitCaseTypeStatement := (context : CaseTypeStatementContext -> v : Any) {
        obj := ""
        Add_current_set()
        rList := List[Str]$()
        rList.Append(Visit(context.judgeTypeCase()).[Str])
        process := "\{BlockLeft} \{ProcessFunctionSupport(context.functionSupportStatement()), BlockRight} break;"
        @ r := rList... {
            obj += r + process
        }
        Delete_current_set()
        <- obj
    }

    .VisitCaseElseStatement := (context : CaseElseStatementContext -> v : Any) {
        obj := ""
        Add_current_set()
        process := "\{BlockLeft} \{ProcessFunctionSupport(context.functionSupportStatement()), BlockRight} break;"
        Delete_current_set()
        obj += "default:" + Wrap + process
        <- obj
    }

    .VisitJudgeStatement := (context : JudgeStatementContext -> v : Any) {
        obj := ""
        obj += Visit(context.judgeIfStatement())
        @ it := context.judgeElseIfStatement()... {
            obj += Visit(it)
        }
        ? context.judgeElseStatement() <> nil {
            obj += Visit(context.judgeElseStatement())
        }
        <- obj
    }

    .VisitJudgeIfStatement := (context : JudgeIfStatementContext -> v : Any) {
        b := Visit(context.expression()).[Result]
        obj := "if ( \{b.text} ) \{BlockLeft, Wrap}"
        Add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        Delete_current_set()
        obj += BlockRight + Wrap
        <- obj
    }

    .VisitJudgeElseStatement := (context : JudgeElseStatementContext -> v : Any) {
        obj := "else \{BlockLeft, Wrap}"
        Add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        Delete_current_set()
        obj += BlockRight + Wrap
        <- obj
    }

    .VisitJudgeElseIfStatement := (context : JudgeElseIfStatementContext -> v : Any) {
        b := Visit(context.expression()).[Result]
        obj := "else if ( \{b.text} ) \{BlockLeft, Wrap}"
        Add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        Delete_current_set()
        obj += BlockRight + Wrap
        <- obj
    }
}
