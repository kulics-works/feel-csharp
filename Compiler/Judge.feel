<- Compiler

-> {
    Antlr4.Runtime
    Antlr4.Runtime.Misc
    System
    System.Collections.Generic

    . = Compiler.FeelParser
    . = Compiler.Compiler_static
}

FeelLangVisitor = $ me {
    .VisitJudgeEqualStatement = (context: JudgeEqualStatementContext -> v: any)  {
        !obj = ""
        expr = Visit(context.expression())!: Result
        obj += "switch (${expr.text}) ${BlockLeft; Wrap}"

        context.caseEqualStatement() >< nil ? {
            obj += Visit(context.caseEqualStatement())!: str + Wrap
            context.caseElseStatement() >< nil ? {
                obj += Visit(context.caseElseStatement())!: str + Wrap
            }
        } | _ {
            context.caseMultiwayEqualStatement() @ [i]v {
                obj += Visit(v)!: str + Wrap
            }
            context.caseMultiwayElseStatement() >< nil ? {
                obj += Visit(context.caseMultiwayElseStatement())!: str + Wrap
            }
        }

        obj += BlockRight+Wrap
        <- obj
    }

    .VisitJudgeTypeStatement = (context: JudgeTypeStatementContext -> v: any)  {
        !obj = ""
        expr = Visit(context.expression())!: Result
        obj += "switch (${expr.text}) ${BlockLeft; Wrap}"

        context.caseTypeStatement() >< nil ? {
            obj += Visit(context.caseTypeStatement())!: str + Wrap
            context.caseElseStatement() >< nil ? {
                obj += Visit(context.caseElseStatement())!: str + Wrap
            }
        } | _ {
            context.caseMultiwayTypeStatement() @ [i]v {
                obj += Visit(v)!: str + Wrap
            }
            context.caseMultiwayElseStatement() >< nil ? {
                obj += Visit(context.caseMultiwayElseStatement())!: str + Wrap
            }
        }

        obj += BlockRight+Wrap
        <- obj
    }

    .VisitJudgeEqualCase = (context: JudgeEqualCaseContext -> v: any) {
        !obj = ""
        expr = Visit(context.expression())!: Result
        obj = "case ${expr.text} :${Wrap}"
        <- obj
    }

    .VisitJudgeTypeCase = (context: JudgeTypeCaseContext -> v: any) {
        !obj = ""
        !id = "it"
        context.id() >< nil ? {
            id = (Visit(context.id())!: Result).text
        }
        me.add_id(id)
        type = Visit(context.typeType())!: str
        obj = "case ${type} ${id} :${Wrap}"
        <- obj
    }

    .VisitCaseEqualStatement = (context: CaseEqualStatementContext -> v: any) {
        !obj = ""
        me.add_current_set()
        rList = list`str{}
        context.judgeEqualCase() @ item {
            r = Visit(item)!: str
            rList.add(r)
        }
        !process = "${BlockLeft} ${ProcessFunctionSupport(context.functionSupportStatement()); BlockRight} break;"
        rList @ r {
            obj += r + process
        }
        me.delete_current_set()

        <- obj
    }

    .VisitCaseMultiwayEqualStatement = (context: CaseMultiwayEqualStatementContext -> v: any) {
        !obj = ""
        me.add_current_set()
        rList = list`str{}
        context.judgeEqualCase() @ item {
            r = Visit(item)!: str
            rList.add(r)
        }
        !process = "${BlockLeft} ${ProcessFunctionSupport(context.functionSupportStatement()); BlockRight} break;"
        rList @ r {
            obj += r + process
        }
        me.delete_current_set()

        <- obj
    }

    .VisitCaseTypeStatement = (context: CaseTypeStatementContext -> v: any) {
        !obj = ""
        me.add_current_set()
        rList = list`str{}
        context.judgeTypeCase() @ item {
            r = Visit(item)!: str
            rList.add(r)
        }
        !process = "${BlockLeft} ${ProcessFunctionSupport(context.functionSupportStatement()); BlockRight} break;"
        rList @ r {
            obj += r + process
        }
        me.delete_current_set()

        <- obj
    }

    .VisitCaseMultiwayTypeStatement = (context: CaseMultiwayTypeStatementContext -> v: any) {
        !obj = ""
        me.add_current_set()
        rList = list`str{}
        context.judgeTypeCase() @ item {
            r = Visit(item)!: str
            rList.add(r)
        }
        !process = "${BlockLeft} ${ProcessFunctionSupport(context.functionSupportStatement()); BlockRight} break;"
        rList @ r {
            obj += r + process
        }
        me.delete_current_set()

        <- obj
    }

    .VisitCaseElseStatement = (context: CaseElseStatementContext -> v: any) {
        !obj = ""
        me.add_current_set()
        !process = "${BlockLeft} ${ProcessFunctionSupport(context.functionSupportStatement()); BlockRight} break;"
        me.delete_current_set()
        obj += "default:" + Wrap + process
        <- obj
    }

    .VisitCaseMultiwayElseStatement = (context: CaseMultiwayElseStatementContext -> v: any) {
        !obj = ""
        me.add_current_set()
        !process = "${BlockLeft} ${ProcessFunctionSupport(context.functionSupportStatement()); BlockRight} break;"
        me.delete_current_set()
        obj += "default:" + Wrap + process
        <- obj
    }

    .VisitJudgeStatement = (context: JudgeStatementContext -> v: any) {
        !obj = ""
        context.judgeIfStatement() >< nil ? {
            obj += Visit(context.judgeIfStatement())
            context.judgeElseStatement() >< nil ? {
                obj += Visit(context.judgeElseStatement())
            }
        } | _ {
            context.judgeMultiwayIfStatement() @ [i]v {
                i >< 0 ? {
                    obj += " else "
                }
                obj += Visit(v)
            }
            context.judgeMultiwayElseStatement() >< nil ? {
                obj += Visit(context.judgeMultiwayElseStatement())
            }
        }

        <- obj
    }

    .VisitJudgeIfStatement = (context: JudgeIfStatementContext -> v: any) {
        b = Visit(context.expression())!: Result
        !obj = "if ( ${b.text} ) ${BlockLeft; Wrap}"
        me.add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight+Wrap
        <- obj
    }

    .VisitJudgeElseStatement = (context: JudgeElseStatementContext -> v: any) {
        !obj = "else ${BlockLeft; Wrap}"
        me.add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight+Wrap
        <- obj
    }

    .VisitJudgeMultiwayIfStatement = (context: JudgeMultiwayIfStatementContext -> v: any) {
        b = Visit(context.expression())!: Result
        !obj = "if ( ${b.text} ) ${BlockLeft; Wrap}"
        me.add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight+Wrap
        <- obj
    }

    .VisitJudgeMultiwayElseStatement = (context: JudgeMultiwayElseStatementContext -> v: any) {
        !obj = "else ${BlockLeft; Wrap}"
        me.add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight+Wrap
        <- obj
    }

    .VisitJudgeExpression = (context: JudgeExpressionContext -> v: any) {
        fn: (str->Result) = (expr) {
            r = Result{}
            r.data = "var"
            r.text = "run(()=> " + BlockLeft + " if ("
            r.text += expr
            r.text += Visit(context.judgeIfExpression())
            r.text += Visit(context.judgeElseExpression())
            r.text += BlockRight + ")"
            <- r
        }
        <- fn
    }

    .VisitJudgeIfExpression = (context: JudgeIfExpressionContext -> v: any) {
        !obj = " ) ${BlockLeft; Wrap}"
        me.add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        obj += "return ${ (Visit(context.tupleExpression())!: Result).text };"
        me.delete_current_set()
        obj += BlockRight + Wrap
        <- obj
    }

    .VisitJudgeElseExpression = (context: JudgeElseExpressionContext -> v: any) {
        !obj = "else ${BlockLeft; Wrap}"
        me.add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        obj += "return ${ (Visit(context.tupleExpression())!: Result).text };"
        me.delete_current_set()
        obj += BlockRight + Wrap
        <- obj
    }
}
