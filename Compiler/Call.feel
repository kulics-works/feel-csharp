# Compiler

# {
    Antlr4.Runtime
    Antlr4.Runtime.Misc
    System
    System.Collections.Generic

    Compiler.FeelParser => .
    Compiler.Compiler_static => .
}

FeelLangVisitorCall := $ () {
    FeelLangVisitorBase

    .VisitCallExpression := (context : CallExpressionContext -> v : Any) {
        r := Visit(context.id()).[Result]
        r.text = "." + r.text
        ? context.templateCall() <> nil {
            r.text += "<" + Visit(context.templateCall()).[Str] + ">"
        }
        ? context.callFunc() <> nil {
            e2 := Visit(context.callFunc()).[Result]
            r.text = r.text + e2.text
        } | context.callElement() <> nil {
            e2 := Visit(context.callElement()).[Result]
            r.text = r.text + e2.text
        }
        <- r
    }

    .VisitCallElement := (context : CallElementContext -> v : Any) {
        r := Visit(context.expression()).[Result]
        r.text = "[\{ r.text }]"
        <- r
    }

    .VisitCallFunc := (context : CallFuncContext -> v : Any) {
        r := Result$("var", Visit(context.tuple()).[Result].text)
        <- r
    }

    .VisitCallMethod := (context : CallMethodContext -> v : Any) {
        id := "." + Visit(context.id()).[Result].text
        ? context.templateCall() <> nil {
            id += "<" + Visit(context.templateCall()).[Str] + ">"
        }
        <- Result$("var", id + Visit(context.tuple()).[Result].text)
    }

    .VisitMethod := (context : MethodContext -> v : Any) {
        id := "." + Visit(context.id()).[Result].text
        ? context.templateCall() <> nil {
            id += "<" + Visit(context.templateCall()).[Str] + ">"
        }
        <- Result$("var", id)
    }

    .VisitCallAsync := (context : CallAsyncContext -> v : Any) {
        r := Result$()
        expr := Visit(context.expression()).[Result]
        r.data = "var"
        r.text = "await " + expr.text
        <- r
    }

    .VisitCallPkg := (context : CallPkgContext -> v : Any) {
        ty := ""
        r := Result$("object")
        ? context.typeNotNull() <> nil {
            ty = Visit(context.typeNotNull()).[Str]
            r.data = ty
        }
        r.text = "(new \{ty}"
        r.text += Visit(context.tuple()).[Result].text
        r.text += ")"
        <- r
    }

    .VisitLambda := (context : LambdaContext -> v : Any) {
        Add_current_set()
        r := Result$("var")
        r.text += "("
        ? context.lambdaIn() <> nil {
            r.text += Visit(context.lambdaIn())
        }
        r.text += ")"
        r.text += "=>"

        ? context.tupleExpression() <> nil {
            r.text += Visit(context.tupleExpression()).[Result].text
        } | {
            r.text += "{\{ProcessFunctionSupport(context.functionSupportStatement())}}"
        }
        Delete_current_set()
        <- r
    }

    .VisitLambdaIn := (context : LambdaInContext -> v : Any) {
        obj := ""
        @ i, v := context.id().WithIndex()... {
            r := Visit(v).[Result]
            ? i == 0 {
                obj += r.text
            } | {
                obj += ", " + r.text
            }
            Add_ID(r.text)
        }
        <- obj
    }
}
