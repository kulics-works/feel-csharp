<- Compiler

-> {
    Antlr4.Runtime
    Antlr4.Runtime.Misc
    System
    System.Collections.Generic

    _ := Compiler.FeelParser
    _ := Compiler.Compiler_static
}

Namespace := $ {
    !name: str
    !imports: str
}

FeelLangVisitor := $ me {
    .VisitStatement := (context: StatementContext -> v: any) {
        !obj := ""
        !imports := ""
        ns := Visit(context.exportStatement())!: Namespace
        context.annotationSupport() >< nil ? {
            obj += Visit(context.annotationSupport())
        }
        obj += "namespace ${ns.name; Wrap; BlockLeft; Wrap}"

        !content := ""
        !contentStatic := ""
        me.add_current_set()
        # "pre process to get type id"
        context.namespaceSupportStatement() @ item {
            child := item.GetChild(0)
            type := child.GetType()
            type == typeof(PackageStatementContext) ? {
                childContext := child!: PackageStatementContext
                id := Visit(childContext.id())!: Result
                me.add_type(id.text)
            } type == typeof(TypeTagStatementContext) ? {
                childContext := child!: TypeTagStatementContext
                me.add_type(childContext.Comment_Tag().GetText().sub_str(2))
            }
        }
        context.namespaceSupportStatement() @ item {
            type := item.GetChild(0).GetType()
            type == typeof(NamespaceVariableStatementContext) |
                type == typeof(NamespaceFunctionStatementContext) |
                type == typeof(NamespaceConstantStatementContext) ? {
                contentStatic += Visit(item)
            } type == typeof(ImportStatementContext) ? {
                imports += Visit(item)
            } _ {
                content += Visit(item)
            }
        }
        obj += content
        contentStatic >< "" ? {
            obj += "public partial class ${ns.name.sub_str(ns.name.last_index_of(".") + 1)}_static ${BlockLeft; Wrap; contentStatic; BlockRight; Wrap}"
        }
        me.delete_current_set()
        obj += BlockRight + Wrap
        # "import library"
        obj = "using Library;${Wrap}using static Library.Lib;${Wrap; imports; Wrap}" + obj
        <- obj
    }

    .VisitExportStatement := (context: ExportStatementContext -> v: any) {
        name := Visit(context.nameSpaceItem())!: str
        obj := Namespace{
            name = name
        }
        <- obj
    }

    .VisitImportStatement := (context: ImportStatementContext -> v: any) {
        !obj := ""
        context.importSubStatement() @ item {
            obj += Visit(item)!: str
        }
        <- obj
    }

    .VisitImportSubStatement := (context: ImportSubStatementContext -> v: any) {
        !obj := ""
        context.annotationSupport() >< nil ? {
            obj += Visit(context.annotationSupport())
        }
        ns := Visit(context.nameSpaceItem())!: str
        context.Dot() >< nil ? {
            obj += "using static ${ ns }"
        } context.id() >< nil ? {
            obj += "using ${ns}.${(Visit(context.id())!: Result).text}"
        } _ {
            obj += "using ${ns}"
        }
        obj += Terminate + Wrap
        <- obj
    }

    .VisitNameSpaceItem := (context: NameSpaceItemContext -> v: any) {
        !obj := ""
        0 .. context.id().Length-1 @ i {
            id := Visit(context.id(i))!: Result
            i == 0 ? {
                obj += id.text
            } _ {
                obj += "." + id.text
            }
        }
        <- obj
    }

    .VisitName := (context: NameContext -> v: any) {
        !obj := ""
        0 .. context.id().Length-1 @ i {
            id := Visit(context.id(i))!: Result
            i == 0 ? {
                obj += id.text
            } _ {
                obj += "." + id.text
            }
        }
        <- obj
    }

    .VisitEnumStatement := (context: EnumStatementContext -> v: any) {
        !obj := ""
        id := Visit(context.id())!: Result
        !header := ""
        #: typ = Visit(context.typeType()) str!
        !typ := "int"
        context.annotationSupport() >< nil ? {
            header += Visit(context.annotationSupport())
        }
        header += "${id.permission} enum ${id.text}:${typ}"
        header += Wrap + BlockLeft + Wrap
        0 .. context.enumSupportStatement().Length-1 @ i {
            obj += Visit(context.enumSupportStatement(i))
        }
        obj += BlockRight + Terminate + Wrap
        obj = header + obj
        <- obj
    }

    .VisitEnumSupportStatement := (context: EnumSupportStatementContext -> v: any) {
        id := Visit(context.id())!: Result
        context.integerExpr() >< nil ? {
            !op := ""
            context.add() >< nil ? {
                op = Visit(context.add())!: str
            }
            id.text += " = " + op + Visit(context.integerExpr())
        }
        <- id.text + ","
    }

    .VisitNamespaceFunctionStatement := (context: NamespaceFunctionStatementContext -> v: any) {
        id := Visit(context.id())!: Result
        !obj := ""
        context.annotationSupport() >< nil ? {
            obj += Visit(context.annotationSupport())
        }
        # "异步"
        !pout := ""
        context.parameterClauseOut() >< nil ? {
            pout = Visit(context.parameterClauseOut())!: str
        }
        context.t.Type == Right_Flow ? {
            pout >< "void" ? {
                pout = "${Task}<${pout}>"
            } _ {
                pout = Task
            }
        }
        obj += "${pout} ${id.text}"

        # "泛型"
        !templateContract := ""
        context.templateDefine() >< nil ? {
            template := Visit(context.templateDefine())!: TemplateItem
            obj += template.Template
            templateContract = template.Contract
        }
        me.add_current_set()
        me.add_func_stack()
        obj += Visit(context.parameterClauseIn()) + templateContract + BlockLeft + Wrap
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight + Wrap
        # "异步"
        get_func_async() ? {
            obj = " async " + obj
        }
        me.delete_func_stack()
        obj = id.permission + " static " + obj
        <- obj
    }

    .VisitNamespaceConstantStatement := (context: NamespaceConstantStatementContext -> v: any) {
        id := Visit(context.id())!: Result
        expr := Visit(context.expression())!: Result
        !typ := ""
        context.typeType() >< nil ? {
            typ = Visit(context.typeType())!: str
        } _ {
            typ = expr.data!: str
        }

        !obj := ""
        context.annotationSupport() >< nil ? {
            obj += Visit(context.annotationSupport())
        }
        
        obj += "${id.permission} const ${typ} ${id.text} = ${expr.text; Terminate; Wrap}"
        <- obj
    }

    .VisitNamespaceVariableStatement := (context: NamespaceVariableStatementContext -> v: any) {
        r1 := Visit(context.id())!: Result
        me.add_id(r1.text)
        !isMutable := r1.isVirtual
        !typ := ""
        !r2: Result? = nil
        context.expression() >< nil ? {
            r2 = Visit(context.expression())!: Result
            typ = r2.data!: str
        }
        context.typeType() >< nil ? {
            typ = Visit(context.typeType())!: str
        }
        !obj := ""
        context.annotationSupport() >< nil ? {
            me.selfPropertyID = r1.text
            obj += Visit(context.annotationSupport())
        }
        me.selfPropertyContent.len > 0 ? {
            !pri := ""
            me.selfPropertyVariable ? {
                pri = "private static ${typ} _${r1.text}" 
                r2 >< nil ? {
                    pri += " = " + r2.text
                }
                pri += Terminate + Wrap
            }
            obj = pri + obj
            obj += "${r1.permission} static ${typ} ${r1.text; BlockLeft}"
            me.selfPropertyContent @ v {
                obj += v
            }
            obj += BlockRight+Wrap
            me.selfPropertyContent.clear()
            me.selfPropertyID = ""
            me.selfPropertyVariable = false
        } _ {
            obj += "${r1.permission} static ${typ} ${r1.text}"
            r2 >< nil ? {
                obj += " = ${r2.text; Terminate; Wrap}"
            } _ {
                obj += Terminate + Wrap
            }
        }
        <- obj
    }

    .VisitTypeTagStatement := (context: TypeTagStatementContext -> v: any) {
        <- ""
    }
}
