# Compiler

# {
    Antlr4.Runtime
    Antlr4.Runtime.Misc
    System
    System.Collections.Generic

    Compiler.FeelParser => .
    Compiler.Compiler_static => .
}

FeelLangVisitorNameSpace := $ () {
    FeelLangVisitorLoop

    .VisitStatement := (context : StatementContext -> v : Any) {
        obj := ""
        imports := ""
        ns := Visit(context.exportStatement()).[Namespace]
        ? context.annotationSupport() <> nil {
            obj += Visit(context.annotationSupport())
        }
        obj += "namespace \{ns.name, Wrap, BlockLeft, Wrap}"

        content := ""
        content_static := ""
        Add_current_set()

        @ item := context.namespaceSupportStatement()... {
            child := item.GetChild(0)
            type := child.GetType()
            ? type == typeof(PackageStatementContext) {
                childContext := child.[PackageStatementContext]
                id := Visit(childContext.id()).[Result]
                Add_type(id.text)
            }
        }
        @ item := context.namespaceSupportStatement()... {
            type := item.GetChild(0).GetType()
            ? type == typeof(NamespaceVariableStatementContext) ||
            type == typeof(NamespaceFunctionStatementContext) {
                content_static += Visit(item)
            } | type == typeof(ImportStatementContext) {
                imports += Visit(item)
            } | {
                content += Visit(item)
            }
        }
        obj += content
        ? content_static <> "" {
            obj += "public partial class \{ns.name.Sub_Str(ns.name.Last_index_of(".") + 1)}_static \{BlockLeft, Wrap, content_static, BlockRight, Wrap}"
        }
        Delete_current_set()
        obj += BlockRight + Wrap

        obj = "using Library;\{Wrap}using static Library.Lib;\{Wrap, imports, Wrap}" + obj
        <- obj
    }

    .VisitExportStatement := (context : ExportStatementContext -> v : Any) {
        name := Visit(context.nameSpaceItem()).[Str]
        obj := Namespace$(name, "")
        <- obj
    }

    .VisitImportStatement := (context : ImportStatementContext -> v : Any) {
        obj := ""
        @ item := context.importSubStatement()... {
            obj += Visit(item).[Str]
        }
        <- obj
    }

    .VisitImportSubStatement := (context : ImportSubStatementContext -> v : Any) {
        obj := ""
        ? context.annotationSupport() <> nil {
            obj += Visit(context.annotationSupport())
        }
        ns := Visit(context.nameSpaceItem()).[Str]
        ? context.Dot() <> nil {
            obj += "using static \{ ns }"
        } | context.id() <> nil {
            obj += "using \{ns}.\{Visit(context.id()).[Result].text}"
        } | {
            obj += "using \{ns}"
        }
        obj += Terminate + Wrap
        <- obj
    }

    .VisitNameSpaceItem := (context : NameSpaceItemContext -> v : Any) {
        obj := ""
        @ i, v := context.id().WithIndex()... {
            id := Visit(v).[Result]
            ? i == 0 {
                obj += id.text
            } | {
                obj += "." + id.text
            }
        }
        <- obj
    }

    .VisitName := (context : NameContext -> v : Any) {
        obj := ""
        @ i, v :=  context.id().WithIndex()... {
            id := Visit(v).[Result]
            ? i == 0 {
                obj += id.text
            } | {
                obj += "." + id.text
            }
        }
        <- obj
    }

    .VisitEnumStatement := (context : EnumStatementContext -> v : Any) {
        obj := ""
        id := Visit(context.id()).[Result]
        header := ""
        typ := "int"
        ? context.annotationSupport() <> nil {
            header += Visit(context.annotationSupport())
        }
        header += "\{id.permission} enum \{id.text}:\{typ}"
        header += Wrap + BlockLeft + Wrap
        @ v := context.enumSupportStatement()... {
            obj += Visit(v)
        }
        obj += BlockRight + Terminate + Wrap
        obj = header + obj
        <- obj
    }

    .VisitEnumSupportStatement := (context : EnumSupportStatementContext -> v : Any) {
        id := Visit(context.id()).[Result]
        ? context.expression() <> nil {
            id.text += " = " + Visit(context.expression())
        }
        <- id.text + ","
    }

    .VisitNamespaceFunctionStatement := (context : NamespaceFunctionStatementContext -> v : Any) {
        id := Visit(context.id()).[Result]
        obj := ""
        ? context.annotationSupport() <> nil {
            obj += Visit(context.annotationSupport())
        }

        pout := ""
        ? context.parameterClauseOut() == nil {
            pout = "void"
        } | {
            pout = Visit(context.parameterClauseOut()).[Str]
            ? context.t.Type == Right_Flow {
                ? pout <> "void" {
                    pout = "\{Task}<\{pout}>"
                } | {
                    pout = Task
                }
            }
        }
        obj += "\{pout} \{id.text}"

        template_contract := ""
        ? context.templateDefine() <> nil {
            template := Visit(context.templateDefine()).[TemplateItem]
            obj += template.template
            template_contract = template.contract
        }
        Add_current_set()
        Add_func_stack()
        obj += Visit(context.parameterClauseIn()) + template_contract + BlockLeft + Wrap
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        Delete_current_set()
        obj += BlockRight + Wrap

        ? Get_func_async() {
            obj = " async " + obj
        }
        Delete_func_stack()
        obj = id.permission + " static " + obj
        <- obj
    }

    .VisitNamespaceVariableStatement := (context : NamespaceVariableStatementContext -> v : Any) {
        r1 := Visit(context.id()).[Result]
        Add_ID(r1.text)
        is_mutable := r1.is_virtual
        typ := ""
        r2 : ?Result = nil
        ? context.expression() <> nil {
            r2 = Visit(context.expression()).[Result]
            typ = r2.data.[Str]
        }
        ? context.typeType() <> nil {
            typ = Visit(context.typeType()).[Str]
        }
        isMutable := true
        ? ~~r1.isMutable {
            ? typ == "int", "uint", "long", "ulong", "ushort", "short",
                 "byte", "sbyte", "float", "double", "bool", "char", "string" {
                isMutable = false
            }
        }
        obj := ""
        ? context.annotationSupport() <> nil {
            obj += Visit(context.annotationSupport())
        }
        ? self_property_content.Size() > 0 {
            obj += "\{r1.permission} static \{typ} \{r1.text, BlockLeft}"
            @ v := self_property_content... {
                obj += v
            }
            obj += BlockRight + Wrap
            self_property_content.Clear()
        } | isMutable || r2 == nil {
            obj += "\{r1.permission} static \{typ} \{r1.text}"
            ? r2 <> nil {
                obj += " = \{r2.text, Terminate, Wrap}"
            } | {
                obj += Terminate + Wrap
            }
        } | {
            obj += "\{r1.permission} const \{typ} \{r1.text} = \{r2.text, Terminate, Wrap}"
        }
        <- obj
    }
}
