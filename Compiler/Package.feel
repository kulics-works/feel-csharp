# Compiler

# {
    Antlr4.Runtime
    Antlr4.Runtime.Misc
    System
    System.Collections.Generic

    Compiler.FeelParser => .
    Compiler.Compiler_static => .
}


FeelLangVisitorPackage := $ () {
    FeelLangVisitorNameSpace

    .VisitIncludeStatement := (context : IncludeStatementContext -> v : Any) {
        <- Visit(context.typeType())
    }

    .VisitPackageStatement := (context : PackageStatementContext -> v : Any) {
        id := Visit(context.id()).[Result]

        obj := ""
        extend := List[Str]$()
        ? context.packageFieldStatement() <> nil {
            item := context.packageFieldStatement()
            r := Visit(item).[Result]
            obj += "public \{id.text}\{r.text}"
            extend.Append_all(r.data.[List[Str]])
        }
        ? context.packageNewStatement() <> nil {
            item := context.packageNewStatement()
            r := Visit(item).[Str]
            obj += "public \{id.text} \{r}"
        }
        obj += BlockRight + Wrap
        header := ""
        ? context.annotationSupport() <> nil {
            header += Visit(context.annotationSupport())
        }
        header += "\{id.permission} partial class \{id.text}"

        template := ""
        template_contract := ""
        ? context.templateDefine() <> nil {
            item := Visit(context.templateDefine()).[TemplateItem]
            template += item.template
            template_contract = item.contract
            header += template
        }

        ? extend.Size() > 0 {
            temp := extend.(0)
            @ i := 1.Up_until(extend.Size())... {
                temp += "," + extend.(i)
            }
            header += ":" + temp
        }

        header += template_contract + BlockLeft + Wrap
        obj = header + obj
        <- obj
    }

    .VisitPackageFieldStatement := (context : PackageFieldStatementContext -> v : Any) {
        obj := ""
        extend := List[Str]$()
        ? context.id(0) <> nil {
            Self := Visit(context.id(0)).[Result]
            self_ID = Self.text
        } | {
            self_ID = "this"
        }
        ? context.id(1) <> nil {
            Super := Visit(context.id(1)).[Result]
            super_ID = Super.text
        }
        obj += Visit(context.parameterConstruct())
        @ item := context.packageSupportStatement()... {
            ? item.GetChild(0).GetType() == typeof(IncludeStatementContext) {
                r := Visit(item).[Str]
                extend.Append(r)
            } | {
                obj += Visit(item)
            }
        }
        self_ID = ""
        super_ID = ""
        <- Result$(extend, obj)
    }

    .VisitParameterConstruct := (context : ParameterConstructContext -> v : Any) {
        obj := ""
        param := ""
        body := ""
        @ i, v := context.parameter().WithIndex()... {
            p := Visit(context.parameter(i)).[Parameter]
            ? i <> 0 {
                param += ", "
            }
            param += "\{p.type} \{p.id} \{p.value}"
            body += "this.\{p.id} = \{p.id, Terminate, Wrap}"
            ? p.annotation <> nil {
                obj += p.annotation
            }
            ? self_property_content.Size() > 0 {
                obj += "\{p.permission} \{p.type} \{p.id, BlockLeft}"
                @ content := self_property_content... {
                    obj += content
                }
                obj += BlockRight + Wrap
                self_property_content.Clear()
            } | {
                obj += "\{p.permission} \{p.type} \{p.id}"
                obj += Terminate + Wrap
            }
        }
        obj = "(\{param}){\{body}}\{Wrap}" + obj
        <- obj
    }

    .VisitPackageFunctionStatement := (context : PackageFunctionStatementContext -> v : Any) {
        id := Visit(context.id()).[Result]
        is_virtual := ""
        ? id.is_virtual {
            is_virtual = " virtual "
        }
        obj := ""
        pout := ""
        ? context.parameterClauseOut() == nil {
            pout = "void"
        } | {
            pout = Visit(context.parameterClauseOut()).[Str]
            ? context.t.Type == Right_Flow {
                ? pout <> "void" {
                    pout = "\{Task}<\{pout}>"
                } | {
                    pout = Task
                }
            }
        }
        obj += "\{is_virtual} \{pout} \{id.text}"
        
        template_contract := ""
        ? context.templateDefine() <> nil {
            template := Visit(context.templateDefine()).[TemplateItem]
            obj += template.template
            template_contract = template.contract
        }
        Add_current_set()
        Add_func_stack()
        obj += Visit(context.parameterClauseIn()) + template_contract + BlockLeft + Wrap
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        Delete_current_set()
        obj += BlockRight + Wrap

        ? Get_func_async() {
            obj = " async " + obj
        }
        Delete_func_stack()
        obj = "\{id.permission} " + obj
        <- obj
    }

    .VisitPackageNewStatement := (context : PackageNewStatementContext -> v : Any) {
        text := ""
        ? context.id(0) <> nil {
            Self := Visit(context.id(0)).[Result]
            self_ID = Self.text
        } | {
            self_ID = "this"
        }
        ? context.id(1) <> nil {
            Super := Visit(context.id(1)).[Result]
            super_ID = Super.text
        }

        Add_current_set()
        text += Visit(context.parameterClauseIn()).[Str]
        ? context.expressionList() <> nil {
            text += ":base(\{Visit(context.expressionList()).[Result].text})"
        }
        text += BlockLeft + ProcessFunctionSupport(context.functionSupportStatement()) + BlockRight + Wrap
        Delete_current_set()
        self_ID = ""
        super_ID = ""
        <- text
    }

    .VisitProtocolStatement := (context : ProtocolStatementContext -> v : Any) {
        id := Visit(context.id()).[Result]
        obj := ""
        extend := List[Str]$()
        interfaceProtocol := ""
        ptclName := id.text
        ? context.annotationSupport() <> nil {
            obj += Visit(context.annotationSupport())
        }
        ? context.protocolSubStatement() <> nil {
            item := context.protocolSubStatement()
            r := Visit(item).[Result]
            interfaceProtocol += r.text
            extend.Append_all(r.data.[List[Str]])
        }

        obj += "public partial interface \{ptclName}"
        ? extend.Size() > 0 {
            temp := extend.(0)
            @ i := 1.Up_until(extend.Size())... {
                temp += "," + extend.(i)
            }
            obj += ":" + temp
        }

        template_contract := ""
        ? context.templateDefine() <> nil {
            template := Visit(context.templateDefine()).[TemplateItem]
            obj += template.template
            template_contract = template.contract
        }
        obj += template_contract + BlockLeft + Wrap
        obj += interfaceProtocol
        obj += BlockRight + Wrap
        <- obj
    }

    .VisitProtocolSubStatement := (context : ProtocolSubStatementContext -> v : Any) {
        obj := ""
        extend := List[Str]$()
        @ item := context.protocolSupportStatement()... {
            ? item.GetChild(0).GetType() == typeof(IncludeStatementContext) {
                r := Visit(item).[Str]
                extend.Append(r)
            } | {
                obj += Visit(item)
            }
        }
        <- Result$(extend, obj)
    }

    .VisitProtocolFunctionStatement := (context : ProtocolFunctionStatementContext -> v : Any) {
        id := Visit(context.id()).[Result]
        obj := ""
        ? context.annotationSupport() <> nil {
            obj += Visit(context.annotationSupport())
        }

        pout := Visit(context.parameterClauseOut()).[Str]
        ? context.t.Type == Right_Flow {
            ? pout <> "void" {
                pout = "\{Task}<\{pout}>"
            } | {
                pout = Task
            }
        }
        obj += pout + " " + id.text

        template_contract := ""
        ? context.templateDefine() <> nil {
            template := Visit(context.templateDefine()).[TemplateItem]
            obj += template.template
            template_contract = template.contract
        }
        obj += Visit(context.parameterClauseIn()) + template_contract + Terminate + Wrap
        <- obj
    }
}
