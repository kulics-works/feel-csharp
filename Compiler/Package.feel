<- Compiler

-> {
    Antlr4.Runtime
    Antlr4.Runtime.Misc
    System
    System.Collections.Generic

    _ := Compiler.FeelParser
    _ := Compiler.Compiler_static
}


FeelLangVisitor := $ me {
    .VisitIncludeStatement := (context: IncludeStatementContext -> v: any) {
        <- Visit(context.typeType())
    }

    .VisitPackageStatement := (context: PackageStatementContext -> v: any) {
        id := Visit(context.id())!: Result

        !obj := ""
        !extend := list str{}
        context.packageStaticStatement() >< nil ? {
            item := context.packageStaticStatement()
            r := Visit(item)!: Result
            obj += r.text
        }
        context.packageFieldStatement() >< nil ? {
            item := context.packageFieldStatement()
            r := Visit(item)!: Result
            obj += r.text
            extend += r.data!: list str
        }
        context.packageNewStatement() >< nil ? {
            item := context.packageNewStatement()
            r := Visit(item)!: str
            obj += "public ${id.text} ${r}"
        }
        obj += BlockRight + Wrap
        !header := ""
        context.annotationSupport() >< nil ? {
            header += Visit(context.annotationSupport())
        }
        header += "${id.permission} partial class ${id.text}"
        # "泛型"
        !template := ""
        !templateContract := ""
        context.templateDefine() >< nil ? {
            item := Visit(context.templateDefine())!: TemplateItem
            template += item.Template
            templateContract = item.Contract
            header += template
        }

        extend.length > 0 ? {
            !temp := extend[0]
            1 .. extend.length-1 @ i {
                temp += "," + extend[i]
            }
            header += ":" + temp
        }

        header += templateContract + BlockLeft + Wrap
        obj = header + obj
        <- obj
    }

    .VisitPackageStaticStatement := (context: PackageStaticStatementContext -> v: any) {
        !obj := ""
        context.packageStaticSupportStatement() @ item {
            obj += Visit(item)
        }
        <- Result{text = obj}
    }

    .VisitPackageStaticVariableStatement := (context: PackageStaticVariableStatementContext -> v: any) {
        r1 := Visit(context.id())!: Result
        !typ := ""
        !r2: Result = nil
        context.expression() >< nil ? {
            r2 = Visit(context.expression())!: Result
            typ = r2.data!: str
        }
        context.typeType() >< nil ? {
            typ = Visit(context.typeType())!: str
        }
        !obj := ""
        context.annotationSupport() >< nil ? {
            me.selfPropertyID = r1.text
            obj += Visit(context.annotationSupport())
        }
        me.selfPropertyContent.len > 0 ? {
            !pri := ""
            me.selfPropertyVariable ? {
                pri = "private static ${typ} _${r1.text}" 
                r2 >< nil ? {
                    pri += " = " + r2.text
                }
                pri += Terminate + Wrap
            }
            obj = pri + obj
            obj += "${r1.permission} static ${typ} ${r1.text; BlockLeft}"
            me.selfPropertyContent @ v {
                obj += v
            }
            obj += BlockRight+Wrap
            me.selfPropertyContent.clear()
            me.selfPropertyID = ""
            me.selfPropertyVariable = false
        } _ {
            obj += "${r1.permission} static ${typ} ${r1.text}"
            r2 >< nil ? {
                obj += " = ${r2.text; Terminate; Wrap}"
            } _ {
                obj += Terminate + Wrap
            }
        }
        <- obj
    }

    .VisitPackageStaticConstantStatement := (context: PackageStaticConstantStatementContext -> v: any) {
        r1 := Visit(context.id())!: Result
        !typ := ""
        !r2: Result? = nil
        context.expression() >< nil ? {
            r2 = Visit(context.expression())!: Result
            typ = r2.data!: str
        }
        context.typeType() >< nil ? {
            typ = Visit(context.typeType())!: str
        }
        !obj := ""
        context.annotationSupport() >< nil ? {
            me.selfPropertyID = r1.text
            obj += Visit(context.annotationSupport())
        }
        me.selfPropertyContent.len > 0 ? {
            !pri := ""
            me.selfPropertyVariable ? {
                pri = "private static ${typ} _${r1.text}" 
                r2 >< nil ? {
                    pri += " = " + r2.text
                }
                pri += Terminate + Wrap
            }
            obj = pri + obj
            obj += "${r1.permission} static ${typ} ${r1.text; BlockLeft}"
            me.selfPropertyContent @ v {
                obj += v
            }
            obj += BlockRight+Wrap
            me.selfPropertyContent.clear()
            me.selfPropertyID = ""
            me.selfPropertyVariable = false
        } _ {
            obj += "${r1.permission} static ${typ} ${r1.text}"
            r2 >< nil ? {
                obj += " = ${r2.text; Terminate; Wrap}"
            } _ {
                obj += Terminate + Wrap
            }
        }
        <- obj
    }

    .VisitPackageStaticFunctionStatement := (context: PackageStaticFunctionStatementContext -> v: any) {
        id := Visit(context.id())!: Result
        !obj := ""
        !pout := ""
        context.parameterClauseOut() >< nil ? {
            pout = Visit(context.parameterClauseOut())!: str
        }
        context.t.Type == Right_Flow ? {
            pout >< "void" ? {
                context.y >< nil ? {
                    pout = "${IEnum}<${pout}>"
                }
                pout = "${Task}<${pout}>"
            } _ {
                pout = Task
            }
            obj += "${pout} ${id.text}"
        } _ {
            context.y >< nil ? {
                pout >< "void" ? {
                    pout = "${IEnum}<${pout}>"
                }
            }
            obj += "${pout} ${id.text}"
        }
        # "泛型"
        !templateContract := ""
        context.templateDefine() >< nil ? {
            template := Visit(context.templateDefine())!: TemplateItem
            obj += template.Template
            templateContract = template.Contract
        }
        me.add_current_set()
        me.add_func_stack()
        obj += Visit(context.parameterClauseIn()) + templateContract + BlockLeft + Wrap
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight + Wrap
        # "异步"
        get_func_async() ? {
            obj = " async " + obj
        }
        me.delete_func_stack()
        obj = "${id.permission} static " + obj
        <- obj
    }

    .VisitPackageFieldStatement := (context: PackageFieldStatementContext -> v: any) {
        !obj := ""
        !extend := list str{}
        context.id(0) >< nil ? {
            Self := Visit(context.id(0))!: Result
            me.selfID = Self.text
        }
        context.id(1) >< nil ? {
            Super := Visit(context.id(1))!: Result
            me.superID = Super.text
        }
        context.packageSupportStatement() @ item{
            item.GetChild(0).GetType() == typeof(IncludeStatementContext) ? {
                r := Visit(item)!: str
                extend += r
            } _ {
                obj += Visit(item)
            }
        }
        me.selfID = ""
        me.superID = ""
        <- Result{text = obj; data = extend}
    }

    .VisitPackageVariableStatement := (context: PackageVariableStatementContext -> v: any) {
        r1 := Visit(context.id())!: Result
        !isMutable := r1.isVirtual
        !isVirtual := ""
        r1.isVirtual ? {
            isVirtual = " virtual "
        }
        !typ := ""
        !r2: Result? = nil
        context.expression() >< nil ? {
            r2 = Visit(context.expression())!: Result
            typ = r2.data!: str
        }
        context.typeType() >< nil ? {
            typ = Visit(context.typeType())!: str
        }
        !obj := ""
        context.annotationSupport() >< nil ? {
            me.selfPropertyID = r1.text
            obj += Visit(context.annotationSupport())
        }
        me.selfPropertyContent.len > 0 ? {
            !pri := ""
            me.selfPropertyVariable ? {
                pri = "private ${typ} _${r1.text}" 
                r2 >< nil ? {
                    pri += " = " + r2.text
                }
                pri += Terminate + Wrap
            }
            obj = pri + obj
            obj += "${r1.permission} ${isVirtual} ${typ} ${r1.text; BlockLeft}"
            me.selfPropertyContent @ v {
                obj += v
            }
            obj += BlockRight+Wrap
            me.selfPropertyContent.clear()
            me.selfPropertyID = ""
            me.selfPropertyVariable = false
        } _ {
            obj += "${r1.permission} ${typ} ${r1.text}"
            r2 >< nil ? {
                obj += " = ${r2.text; Terminate; Wrap}"
            } _ {
                obj += Terminate + Wrap
            }
        }
        <- obj
    }

    .VisitPackageConstantStatement := (context: PackageConstantStatementContext -> v: any) {
        r1 := Visit(context.id())!: Result
        !isMutable := r1.isVirtual
        !isVirtual := ""
        r1.isVirtual ? {
            isVirtual = " virtual "
        }
        !typ := ""
        !r2: Result? = nil
        context.expression() >< nil ? {
            r2 = Visit(context.expression())!: Result
            typ = r2.data!: str
        }
        context.typeType() >< nil ? {
            typ = Visit(context.typeType())!: str
        }
        !obj := ""
        context.annotationSupport() >< nil ? {
            me.selfPropertyID = r1.text
            obj += Visit(context.annotationSupport())
        }
        me.selfPropertyContent.len > 0 ? {
            !pri := ""
            me.selfPropertyVariable ? {
                pri = "private ${typ} _${r1.text}" 
                r2 >< nil ? {
                    pri += " = " + r2.text
                }
                pri += Terminate + Wrap
            }
            obj = pri + obj
            obj += "${r1.permission} ${isVirtual} ${typ} ${r1.text; BlockLeft}"
            me.selfPropertyContent @ v {
                obj += v
            }
            obj += BlockRight+Wrap
            me.selfPropertyContent.clear()
            me.selfPropertyID = ""
            me.selfPropertyVariable = false
        } _ {
            obj += "${r1.permission} ${typ} ${r1.text}"
            r2 >< nil ? {
                obj += " = ${r2.text; Terminate; Wrap}"
            } _ {
                obj += Terminate + Wrap
            }
        }
        <- obj
    }

    .VisitPackageFunctionStatement := (context: PackageFunctionStatementContext -> v: any) {
        id := Visit(context.id())!: Result
        !isVirtual := ""
        id.isVirtual ? {
            isVirtual = " virtual "
        }
        !obj := ""
        !pout := ""
        context.parameterClauseOut() >< nil ? {
            pout = Visit(context.parameterClauseOut())!: str
        }
        context.t.Type == Right_Flow ? {
            pout >< "void" ? {
                context.y >< nil ? {
                    pout = "${IEnum}<${pout}>"
                }
                pout = "${Task}<${pout}>"
            } _ {
                pout = Task
            }
            obj += "${isVirtual} ${pout} ${id.text}"
        } _ {
            context.y >< nil ? {
                pout >< "void" ? {
                    pout = "${IEnum}<${pout}>"
                }
            }
            obj += "${isVirtual} ${pout} ${id.text}"
        }
        # "泛型"
        !templateContract := ""
        context.templateDefine() >< nil ? {
            template := Visit(context.templateDefine())!: TemplateItem
            obj += template.Template
            templateContract = template.Contract
        }
        me.add_current_set()
        me.add_func_stack()
        obj += Visit(context.parameterClauseIn()) + templateContract + BlockLeft + Wrap
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight + Wrap
        # "异步"
        get_func_async() ? {
            obj = " async " + obj
        }
        me.delete_func_stack()
        obj = "${id.permission} " + obj
        <- obj
    }

    .VisitPackageNewStatement := (context: PackageNewStatementContext -> v: any) {
        !text := ""
        context.id(0) >< nil ? {
            Self := Visit(context.id(0))!: Result
            me.selfID = Self.text
        }
        context.id(1) >< nil ? {
            Super := Visit(context.id(1))!: Result
            me.superID = Super.text
        }
        # "获取构造数据"
        me.add_current_set()
        text += Visit(context.parameterClauseIn())!: str
        context.expressionList() >< nil ? {
            text += ":base(${(Visit(context.expressionList())!: Result).text})"
        }
        text += BlockLeft + ProcessFunctionSupport(context.functionSupportStatement()) + BlockRight + Wrap
        me.delete_current_set()
        me.selfID = ""
        me.superID = ""
        <- text
    }

    .VisitPackageEventStatement := (context: PackageEventStatementContext -> v: any) {
        !obj := ""
        id := Visit(context.id())!: Result
        nameSpace := Visit(context.nameSpaceItem())
        obj += "public event ${nameSpace} ${id.text; Terminate; Wrap}"
        <- obj
    }

    .VisitProtocolStatement := (context: ProtocolStatementContext -> v: any) {
        id := Visit(context.id())!: Result
        !obj := ""
        !extend := list str{}
        !interfaceProtocol := ""
        !ptclName := id.text
        context.annotationSupport() >< nil ? {
            obj += Visit(context.annotationSupport())
        }
        context.protocolSubStatement() >< nil ? {
            item := context.protocolSubStatement()
            r := Visit(item)!: Result
            interfaceProtocol += r.text
            extend += r.data!: list str
        }

        obj += "public partial interface ${ptclName}"
        extend.length > 0 ? {
            !temp := extend[0]
            1 .. extend.length-1 @ i {
                temp += "," + extend[i]
            }
            obj += ":" + temp
        }
        # "泛型"
        !templateContract := ""
        context.templateDefine() >< nil ? {
            template := Visit(context.templateDefine())!: TemplateItem
            obj += template.Template
            templateContract = template.Contract
        }
        obj += templateContract + BlockLeft + Wrap
        obj += interfaceProtocol
        obj += BlockRight + Wrap
        <- obj
    }

    .VisitProtocolSubStatement := (context: ProtocolSubStatementContext -> v: any) {
        !obj := ""
        !extend := list str{}
        context.protocolSupportStatement() @ item {
            item.GetChild(0).GetType() == typeof(IncludeStatementContext) ? {
                r := Visit(item)!: str
                extend += r
            } _ {
                obj += Visit(item)
            }
        }
        <- Result{text = obj; data = extend}
    }

    .VisitProtocolVariableStatement := (context: ProtocolVariableStatementContext -> v: any) {
        id := Visit(context.id())!: Result
        !isMutable := id.isVirtual
        !obj := ""
        context.annotationSupport() >< nil ? {
            obj += Visit(context.annotationSupport())
        }
        type := Visit(context.typeType())!: str
        obj += type + " " + id.text
        obj += BlockLeft
        obj += "get;set;"
        obj += BlockRight + Wrap
        <- obj
    }

    .VisitProtocolFunctionStatement := (context: ProtocolFunctionStatementContext -> v: any) {
        id := Visit(context.id())!: Result
        !obj := ""
        context.annotationSupport() >< nil ? {
            obj += Visit(context.annotationSupport())
        }
        # "异步"
        !pout := Visit(context.parameterClauseOut())!: str
        context.t.Type == Right_Flow ? {
            pout >< "void" ? {
                context.y >< nil ? {
                    pout = "${IEnum}<${pout}>"
                }
                pout = "${Task}<${pout}>"
            } _ {
                pout = Task
            }
            obj += pout + " " + id.text
        } _ {
            context.y >< nil ? {
                pout >< "void" ? {
                    pout = "${IEnum}<${pout}>"
                }
            }
            obj += pout + " " + id.text
        }
        # "泛型"
        !templateContract := ""
        context.templateDefine() >< nil ? {
            template := Visit(context.templateDefine())!: TemplateItem
            obj += template.Template
            templateContract = template.Contract
        }
        obj += Visit(context.parameterClauseIn()) + templateContract + Terminate + Wrap
        <- obj
    }
}
