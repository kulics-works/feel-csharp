<- Compiler

-> {
    Antlr4.Runtime
    Antlr4.Runtime.Misc
    System
    System.Collections.Generic

    . = Compiler.FeelParser
    . = Compiler.Compiler_static
}


FeelLangVisitor = $ me {
    .VisitIncludeStatement = (context : IncludeStatementContext -> v : Any) {
        <- Visit(context.typeType())
    }

    .VisitPackageStatement = (context : PackageStatementContext -> v : Any) {
        id = Visit(context.id()) ! Result

        obj = ""
        extend = (Str)List{}
        context.packageFieldStatement() <> nil ? {
            item = context.packageFieldStatement()
            r = Visit(item) ! Result
            obj += r.text
            extend.Append_all(r.data ! (Str)List)
        }
        context.packageNewStatement() <> nil ? {
            item = context.packageNewStatement()
            r = Visit(item) ! Str
            obj += "public \{id.text} \{r}"
        }
        obj += BlockRight + Wrap
        header = ""
        context.annotationSupport() <> nil ? {
            header += Visit(context.annotationSupport())
        }
        header += "\{id.permission} partial class \{id.text}"

        template = ""
        template_contract = ""
        context.templateDefine() <> nil ? {
            item = Visit(context.templateDefine()) ! TemplateItem
            template += item.template
            template_contract = item.contract
            header += template
        }

        extend.Size() > 0 ? {
            temp = extend[0]
            1 .. extend.Size() @ i {
                temp += "," + extend[i]
            }
            header += ":" + temp
        }

        header += template_contract + BlockLeft + Wrap
        obj = header + obj
        <- obj
    }

    .VisitPackageFieldStatement = (context : PackageFieldStatementContext -> v : Any) {
        obj = ""
        extend = (Str)List{}
        context.id(0) <> nil ? {
            Self = Visit(context.id(0)) ! Result
            me.self_ID = Self.text
        }
        context.id(1) <> nil ? {
            Super = Visit(context.id(1)) ! Result
            me.super_ID = Super.text
        }
        context.packageConstructor() @ item {
            item.GetChild(0).GetType() == typeof(IncludeStatementContext) ? {
                r = Visit(item) ! Str
                extend.Append(r)
            }
            | ? {
                obj += Visit(item)
            }
        }
        context.packageSupportStatement() @ item {
            item.GetChild(0).GetType() == typeof(IncludeStatementContext) ? {
                r = Visit(item) ! Str
                extend.Append(r)
            }
            | ? {
                obj += Visit(item)
            }
        }
        me.self_ID = ""
        me.super_ID = ""
        <- Result{text = obj; data = extend}
    }

    .VisitPackageVariableStatement = (context : PackageVariableStatementContext -> v : Any) {
        r1 = Visit(context.id()) ! Result
        is_mutable = r1.is_virtual
        is_virtual = ""
        r1.is_virtual ? {
            is_virtual = " virtual "
        }
        typ = Visit(context.typeType()) ! Str
        obj = ""
        context.annotationSupport() <> nil ? {
            me.self_property_ID = r1.text
            obj += Visit(context.annotationSupport())
        }
        me.self_property_content.Size() > 0 ? {
            pri = ""
            me.self_property_variable ? {
                pri = "private \{typ} _\{r1.text} \{Terminate + Wrap}"
            }
            obj = pri + obj
            obj += "\{r1.permission} \{is_virtual} \{typ} \{r1.text; BlockLeft}"
            me.self_property_content @ v {
                obj += v
            }
            obj += BlockRight+Wrap
            me.self_property_content.Clear()
            me.self_property_ID = ""
            me.self_property_variable = false
        }
        | ? {
            obj += "\{r1.permission} \{typ} \{r1.text} \{Terminate + Wrap}"
        }
        <- obj
    }

    .VisitPackageFunctionStatement = (context : PackageFunctionStatementContext -> v : Any) {
        id = Visit(context.id()) ! Result
        is_virtual = ""
        id.is_virtual ? {
            is_virtual = " virtual "
        }
        obj = ""
        pout = ""
        context.t == nil ? {
            pout = "void"
        }
        | ? {
            pout = Visit(context.parameterClauseOut()) ! Str
            context.t.Type == Right_Flow ? {
                pout <> "void" ? {
                    pout = "\{Task}<\{pout}>"
                }
                | ? {
                    pout = Task
                }
            }
        }
        obj += "\{is_virtual} \{pout} \{id.text}"
        
        template_contract = ""
        context.templateDefine() <> nil ? {
            template = Visit(context.templateDefine()) ! TemplateItem
            obj += template.template
            template_contract = template.contract
        }
        me.Add_current_set()
        me.Add_func_stack()
        obj += Visit(context.parameterClauseIn()) + template_contract + BlockLeft + Wrap
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.Delete_current_set()
        obj += BlockRight + Wrap

        Get_func_async() ? {
            obj = " async " + obj
        }
        me.Delete_func_stack()
        obj = "\{id.permission} " + obj
        <- obj
    }

    .VisitPackageNewStatement = (context : PackageNewStatementContext -> v : Any) {
        text = ""
        context.id(0) <> nil ? {
            Self = Visit(context.id(0)) ! Result
            me.self_ID = Self.text
        }
        context.id(1) <> nil ? {
            Super = Visit(context.id(1)) ! Result
            me.super_ID = Super.text
        }

        me.Add_current_set()
        text += Visit(context.parameterClauseIn()) ! Str
        context.expressionList() <> nil ? {
            text += ":base(\{(Visit(context.expressionList()) ! Result).text})"
        }
        text += BlockLeft + ProcessFunctionSupport(context.functionSupportStatement()) + BlockRight + Wrap
        me.Delete_current_set()
        me.self_ID = ""
        me.super_ID = ""
        <- text
    }

    .VisitProtocolStatement = (context : ProtocolStatementContext -> v : Any) {
        id = Visit(context.id()) ! Result
        obj = ""
        extend = (Str)List{}
        interfaceProtocol = ""
        ptclName = id.text
        context.annotationSupport() <> nil ? {
            obj += Visit(context.annotationSupport())
        }
        context.protocolSubStatement() <> nil ? {
            item = context.protocolSubStatement()
            r = Visit(item) ! Result
            interfaceProtocol += r.text
            extend.Append_all(r.data ! (Str)List)
        }

        obj += "public partial interface \{ptclName}"
        extend.Size() > 0 ? {
            temp = extend[0]
            1 .. extend.Size() @ i {
                temp += "," + extend[i]
            }
            obj += ":" + temp
        }

        template_contract = ""
        context.templateDefine() <> nil ? {
            template = Visit(context.templateDefine()) ! TemplateItem
            obj += template.template
            template_contract = template.contract
        }
        obj += template_contract + BlockLeft + Wrap
        obj += interfaceProtocol
        obj += BlockRight + Wrap
        <- obj
    }

    .VisitProtocolSubStatement = (context : ProtocolSubStatementContext -> v : Any) {
        obj = ""
        extend = (Str)List{}
        context.protocolSupportStatement() @ item {
            item.GetChild(0).GetType() == typeof(IncludeStatementContext) ? {
                r = Visit(item) ! Str
                extend.Append(r)
            }
            | ? {
                obj += Visit(item)
            }
        }
        <- Result{text = obj; data = extend}
    }

    .VisitProtocolFunctionStatement = (context : ProtocolFunctionStatementContext -> v : Any) {
        id = Visit(context.id()) ! Result
        obj = ""
        context.annotationSupport() <> nil ? {
            obj += Visit(context.annotationSupport())
        }

        pout = Visit(context.parameterClauseOut()) ! Str
        context.t.Type == Right_Flow ? {
            pout <> "void" ? {
                pout = "\{Task}<\{pout}>"
            }
            | ? {
                pout = Task
            }
        }
        obj += pout + " " + id.text

        template_contract = ""
        context.templateDefine() <> nil ? {
            template = Visit(context.templateDefine()) ! TemplateItem
            obj += template.template
            template_contract = template.contract
        }
        obj += Visit(context.parameterClauseIn()) + template_contract + Terminate + Wrap
        <- obj
    }
}
