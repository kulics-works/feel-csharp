# Compiler

# {
    Antlr4.Runtime
    Antlr4.Runtime.Misc
    System
    System.Collections.Generic

    Compiler.FeelParser => .
    Compiler.Compiler_static => .
}

Parameter := $ (
    id : Str = "",
    type : Str = "",
    value : Str = "",
    annotation : Str = "",
    permission : Str = ""
) {}

FeelLangVisitorFunction := $ () {
    FeelLangVisitorExpression

    .VisitFunctionStatement := (context : FunctionStatementContext -> v : Any) {
        id := Visit(context.id()).[Result]
        obj := ""

        pout := ""
        ? context.parameterClauseOut() == nil {
            pout = "void"
        } | {
            pout = Visit(context.parameterClauseOut()).[Str]
        }
        obj += "\{pout} \{id.text}"
        
        template_contract := ""
        ? context.templateDefine() <> nil {
            template := Visit(context.templateDefine()).[TemplateItem]
            obj += template.template
            template_contract = template.contract
        }
        Add_current_set()
        obj += "\{Visit(context.parameterClauseIn())} \{template_contract, Wrap, BlockLeft, Wrap} "
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        obj += BlockRight + Wrap
        Delete_current_set()
        <- obj
    }

    .VisitReturnStatement := (context : ReturnStatementContext -> v : Any) {
        ? context.tupleExpression() <> nil {
            r := Visit(context.tupleExpression()).[Result]
            <- "return \{r.text, Terminate, Wrap}"
        }
        <- "return\{Terminate, Wrap}"
    }

    .VisitTuple := (context : TupleContext -> v : Any) {
        obj := "("
        @ i, v := context.tupleItem().WithIndex()... {
            r := Visit(v).[Result]
            ? i == 0 {
                obj += r.text
            } | {
                obj += ", " + r.text
            }
        }
        obj += ")"
        <- Result$("var", obj)
    }

    .VisitTupleItem := (context : TupleItemContext -> v : Any) {
        obj := ""
        ? context.id() <> nil {
            obj += Visit(context.id()).[Result].text + ": "
        }
        obj += Visit(context.expression()).[Result].text
        <- Result$("var", obj)
    }

    .VisitTupleExpression := (context : TupleExpressionContext -> v : Any) {
        obj := ""
        @ i, v := context.expression().WithIndex()...  {
            r := Visit(v).[Result]
            ? i == 0 {
                obj += r.text
            } | {
                obj += ", " + r.text
            }
        }
        ? context.expression().Length > 1 {
            obj = "(\{obj})"
        }
        <- Result$("var", obj)
    }

    .VisitParameterClauseIn := (context : ParameterClauseInContext -> v : Any) {
        obj := "("
        @ i, v := context.parameter().WithIndex()... {
            p := Visit(v).[Parameter]
            param := "\{p.annotation} \{p.type} \{p.id} \{p.value}"
            ? i == 0 {
                obj += param
            } | {
                obj += ", " + param
            }
            Add_ID(p.id)
        }
        obj += ")"
        <- obj
    }

    .VisitParameterClauseOut := (context : ParameterClauseOutContext -> v : Any) {
        obj := ""
        ? context.parameter().Length == 0 {
            obj += "void"
        } | == 1 {
            p := Visit(context.parameter(0)).[Parameter]
            obj += p.type
        }
        ? context.parameter().Length > 1 {
            obj += "("
            @ i, v := context.parameter().WithIndex()... {
                p := Visit(v).[Parameter]
                param := "\{p.annotation} \{p.type} \{p.id} \{p.value}"
                ? i == 0 {
                    obj += param
                } | {
                    obj += ", " + param
                }
            }
            obj += ")"
        }
        <- obj
    }

    .VisitParameter := (context : ParameterContext -> v : Any) {
        p := Parameter$()
        id := Visit(context.id()).[Result]
        p.id = id.text
        p.permission = id.permission
        ? context.annotationSupport() <> nil {
            p.annotation = Visit(context.annotationSupport()).[Str]
        }
        p.type = Visit(context.typeType()).[Str]
        ? context.Dot_Dot_Dot() <> nil {
            p.type = "params \{p.type}[]"
        }
        ? context.Bang() <> nil {
            p.type = "ref \{p.type}"
        }
        ? context.expression() <> nil {
            p.value = " = " + Visit(context.expression()).[Result].text
        }
        <- p
    }
}
