# Compiler

# {
    Antlr4.Runtime
    Antlr4.Runtime.Misc
    System
    System.Collections.Generic

    Compiler.FeelParser => .
    Compiler.Compiler_static => .
}

FeelLangVisitorCheck := $ () {
    FeelLangVisitorCall

    .VisitCheckStatement := (context : CheckStatementContext -> v : Any) {
        obj := "try \{BlockLeft, Wrap}"
        Add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        Delete_current_set()
        obj += BlockRight
        @ item := context.checkErrorStatement()... {
            obj += Visit(item) + Wrap
        }

        ? context.checkFinallyStatment() <> nil {
            obj += Visit(context.checkFinallyStatment())
        }
        <- obj
    }

    .VisitCheckErrorStatement := (context : CheckErrorStatementContext -> v : Any) {
        Add_current_set()
        obj := ""
        ID := Visit(context.id()).[Result].text
        Add_ID(ID)

        type_data := "Exception"
        ? context.typeType() <> nil {
            type_data = Visit(context.typeType()).[Str]
        }

        obj += "catch( \{type_data} \{ID} )\{Wrap, BlockLeft, Wrap}"
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        Delete_current_set()
        obj += BlockRight
        <- obj
    }

    .VisitCheckFinallyStatment := (context : CheckFinallyStatmentContext -> v : Any) {
        obj := "finally \{Wrap, BlockLeft, Wrap}"
        Add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        Delete_current_set()
        obj += BlockRight + Wrap
        <- obj
    }

    .VisitUsingStatement := (context : UsingStatementContext -> v : Any) {
        obj := ""
        @ i, v := context.varId().WithIndex()... {
            ? i <> 0 {
                obj += ", var " + Visit(v)
            } | {
                obj += "var " + Visit(v)
            }
        }
        ? context.varId().Length > 1 {
            obj = "(" + obj + ")"
        }
        r2 := Visit(context.tupleExpression()).[Result]
        obj += " = \{r2.text}"
        obj = "using (\{obj}) \{BlockLeft, Wrap}"
        Add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        Delete_current_set()
        obj += BlockRight
        <- obj
    }

    .VisitCheckReportStatement := (context : CheckReportStatementContext -> v : Any) {
        obj := "throw \{Visit(context.expression()).[Result].text, Terminate, Wrap}"
        <- obj
    }
}
