<- Compiler

-> {
    Antlr4.Runtime
    Antlr4.Runtime.Misc
    System
    System.Collections.Generic

    . = Compiler.FeelParser
    . = Compiler.Compiler_static
}


FeelLangVisitor = $ me {
    .VisitCheckStatement = (context: CheckStatementContext -> v: any) {
        !obj = "try ${BlockLeft; Wrap}"
        me.add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight
        context.checkErrorStatement() @ item {
            obj += Visit(item) + Wrap
        }

        context.checkFinallyStatment() >< nil ? {
            obj += Visit(context.checkFinallyStatment())
        }
        <- obj
    }

    .VisitCheckErrorStatement = (context: CheckErrorStatementContext -> v: any) {
        me.add_current_set()
        !obj = ""
        ID = (Visit(context.id())!: Result).text
        me.add_id(ID)

        !Type = "Exception"
        context.typeType() >< nil ? {
            Type = Visit(context.typeType())!: str
        }

        obj += "catch( ${Type} ${ID} )${Wrap; BlockLeft; Wrap}"
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight
        <- obj
    }

    .VisitCheckFinallyStatment = (context: CheckFinallyStatmentContext -> v: any) {
        !obj = "finally ${Wrap; BlockLeft; Wrap}"
        me.add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight + Wrap
        <- obj
    }

    .VisitUsingStatement = (context: UsingStatementContext -> v: any) {
        !obj = ""
        context.constId() @ [i]v {
            i >< 0 ? {
                obj += "," + Visit(v)
            } | _ {
                obj += Visit(v)
            }
        }
        context.constId().Length > 1 ? {
            obj = "(" + obj + ")"
        }
        r2 = Visit(context.tupleExpression())!: Result
        obj += " = ${r2.text}"
        obj = "using (${obj}) ${BlockLeft; Wrap}"
        me.add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight
        <- obj
    }

    .VisitCheckReportStatement = (context: CheckReportStatementContext -> v: any) {
        !obj = "throw ${(Visit(context.expression())!: Result).text; Terminate; Wrap}"
        <- obj
    }

    .VisitCheckExpression = (context: CheckExpressionContext -> v: any) {
        !obj = "run(()=> { ${Wrap}try ${BlockLeft; Wrap}"
        me.add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        obj += "return ${ (Visit(context.tupleExpression())!: Result).text };"
        me.delete_current_set()
        obj += BlockRight + Wrap
        context.checkErrorExpression() @ item {
            obj += Visit(item) + Wrap
        }

        context.checkFinallyStatment() >< nil ? {
            obj += Visit(context.checkFinallyStatment())
        }

        obj += "})"
        <- Result{ data="var"; text=obj}
    }

    .VisitCheckErrorExpression = (context: CheckErrorExpressionContext -> v: any) {
        me.add_current_set()
        !obj = ""
        ID = (Visit(context.id())!: Result).text
        me.add_id(ID)

        !Type = "Exception"
        context.typeType() >< nil ? {
            Type = Visit(context.typeType())!: str
        }

        obj += "catch( ${Type} ${ID} )${Wrap; BlockLeft; Wrap}"
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        obj += "return ${ (Visit(context.tupleExpression())!: Result).text };"
        me.delete_current_set()
        obj += BlockRight
        <- obj
    }
}
