<- Compiler

-> {
    Antlr4.Runtime
    Antlr4.Runtime.Misc
    System
    System.Collections.Generic

    . = Compiler.FeelParser
    . = Compiler.Compiler_static
}

FeelLangVisitor = $ me {
    .VisitTypeType = (context: TypeTypeContext -> v: any) {
        !obj = ""
        obj = Visit(context.GetChild(0)) !! str
        <- obj
    }

    .VisitTypeNullable = (context: TypeNullableContext -> v: any) {
        !obj = ""
        obj = Visit(context.typeNotNull()) !! str
        obj += "?"
        <- obj
    }

    .VisitTypePackage = (context: TypePackageContext -> v: any) {
        !obj = ""
        obj += Visit(context.nameSpaceItem())
        context.templateCall() >< nil ? {
            obj == "array" ? {
                obj = "${Visit(context.templateCall())}[]"
            }
            | ? {
                obj += "<" + Visit(context.templateCall()) + ">"
            }
        }
        <- obj
    }

    .VisitTypeFunction = (context: TypeFunctionContext -> v: any) {
        !obj = ""
        !in = Visit(context.typeFunctionParameterClause(0)) !! str
        !out = Visit(context.typeFunctionParameterClause(1)) !! str
        context.t.Type == Right_Arrow ? {
            out.Length == 0 ? {
                in.Length == 0 ? {
                    obj = "Action"
                }
                | ? {
                    obj = "Action<${in}>"
                }
            }
            | ? {
                out.first_index_of(",") >= 0 ? {
                    out = "(${out})"
                }
                in.Length == 0 ? {
                    obj = "Func<${out}>"
                }
                | ? {
                    obj = "Func<${in}, ${out}>"
                }
            }
        }
        | ? {
            out.Length == 0 ? {
                in.Length == 0 ? {
                    obj = "Func<${Task}>"
                }
                | ? {
                    obj = "Func<${in}, ${Task}>"
                }
            }
            | ? {
                in.Length == 0 ? {
                    obj = "Func<${Task}<${out}>>"
                }
                | ? {
                    obj = "Func<${in}, ${Task}<${out}>>"
                }
            }
        }
        <- obj
    }

    .VisitTypeAny = (context: TypeAnyContext -> v: any) {
        <- Any
    }

    .VisitTypeFunctionParameterClause = (context: TypeFunctionParameterClauseContext -> v: any) {
        !obj = ""
        0 ..< context.typeType().Length @ i {
            p = Visit(context.typeType(i)) !! str
            i == 0 ? {
                obj += p
            }
            | ? {
                obj += ", " + p
            }
        }
        <- obj
    }

    .VisitTypeBasic = (context: TypeBasicContext -> v: any) {
        context.t.Type == 
        | TypeI8 ? {<- I8}
        | TypeU8 ? {<- U8}
        | TypeI16 ? {<- I16}
        | TypeU16 ? {<- U16}
        | TypeI32 ? {<- I32} 
        | TypeU32 ? {<- U32}
        | TypeI64 ? {<- I64}
        | TypeU64 ? {<- U64}
        | TypeF32 ? {<- F32}
        | TypeF64 ? {<- F64}
        | TypeChr ? {<- Chr}
        | TypeStr ? {<- Str}
        | TypeBool ? {<- Bool}
        | TypeInt ? {<- Int}
        | TypeNum ? {<- Num}
        | TypeByte ? {<- U8}
        | ? {<- Any}
    }
}
