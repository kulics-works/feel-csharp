# Compiler

# {
    Antlr4.Runtime
    Antlr4.Runtime.Misc
    System
    System.Collections.Generic

    Compiler.FeelParser => .
    Compiler.Compiler_static => .
}

FeelLangVisitor := $ () {
    FeelLangVisitorPackage

    .VisitTypeType := (context : TypeTypeContext -> v : Any) {
        obj := ""
        obj = Visit(context.GetChild(0)).[Str]
        <- obj
    }

    .VisitTypeNullable := (context : TypeNullableContext -> v : Any) {
        obj := ""
        obj = Visit(context.typeNotNull()).[Str]
        obj += "?"
        <- obj
    }

    .VisitTypePackage := (context : TypePackageContext -> v : Any) {
        obj := ""
        obj += Visit(context.nameSpaceItem())
        ? obj == "List" {
            obj = TargetTypeLst
        } | == "Dict" {
            obj = TargetTypeDic
        }
        ? context.templateCall() <> nil {
            ? obj == "Array" {
                obj = "\{Visit(context.templateCall())}[]"
            } | {
                obj += "<" + Visit(context.templateCall()) + ">"
            }
            <- obj
        }
        ? obj == "I8" {
            <- TargetTypeI8
        } | == "U8" {
            <- TargetTypeU8
        } | == "I16" {
            <- TargetTypeI16
        } | == "U16" {
            <- TargetTypeU16
        } | == "I32" {
            <- TargetTypeI32
        } | == "U32" {
            <- TargetTypeU32
        } | == "I64" {
            <- TargetTypeI64
        } | == "U64" {
            <- TargetTypeU64
        } | == "F32" {
            <- TargetTypeF32
        } | == "F64" {
            <- TargetTypeF64
        } | == "Chr" {
            <- TargetTypeChr
        } | == "Str" {
            <- TargetTypeStr
        } | == "Bool" {
            <- TargetTypeBool
        } | == "Int" {
            <- TargetTypeInt
        } | == "Num" {
            <- TargetTypeNum
        } | == "Byte" {
            <- TargetTypeU8
        }
        <- obj
    }

    .VisitTypeFunction := (context : TypeFunctionContext -> v : Any) {
        obj := ""
        in := Visit(context.typeFunctionParameterClause(0)).[Str]
        out := Visit(context.typeFunctionParameterClause(1)).[Str]
        ? out.Length == 0 {
            ? in.Length == 0 {
                obj = "Action"
            } | {
                obj = "Action<\{in}>"
            }
        } | {
            ? out.First_index_of(",") >= 0 {
                out = "(\{out})"
            }
            ? in.Length == 0 {
                obj = "Func<\{out}>"
            } | {
                obj = "Func<\{in}, \{out}>"
            }
        }
        <- obj
    }

    .VisitTypeAny := (context : TypeAnyContext -> v : Any) {
        <- TargetTypeAny
    }

    .VisitTypeFunctionParameterClause := (context : TypeFunctionParameterClauseContext -> v : Any) {
        obj := ""
        @ i, v := context.typeType().WithIndex()...  {
            p := Visit(v).[Str]
            ? i == 0 {
                obj += p
            } | {
                obj += ", " + p
            }
        }
        <- obj
    }
}
