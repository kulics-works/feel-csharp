<- Compiler

-> {
    Antlr4.Runtime
    System
    System.IO
    System.Text
}

!_ReadPath: str
!_PathLine: str

Main := (args: [array str]->) {
    # "检查系统平台，区分路径字符"
    !os := Environment.OSVersion.Platform
    ? os == PlatformID.Unix | os == PlatformID.MacOSX {
        _ReadPath = "./"
        _PathLine = "/"
    } _ {
        _ReadPath = ".\\"
        _PathLine = "\\"
    }

    Compiled(_ReadPath)

    print("Completed")
}

Compiled := (path: str->) {
    # "获取相对路径下所有文件"
    Files := Directory.GetFiles(path, "*.feel")
    @ file := Files {
        # "文件流读文件"
        -> fsRead := FileStream(file, FileMode.Open) {
            ! {
                FSLength := fsRead.Length: int!
                ByteBlock := [array u8](FSLength)
                r := fsRead.Read(ByteBlock, 0, ByteBlock.Length)
                Input := Encoding.UTF8.GetString(ByteBlock)

                Stream := AntlrInputStream(Input)
                Lexer := FeelLexer(Stream)
                Tokens := CommonTokenStream(Lexer)
                Parser := FeelParser(Tokens)
                Parser.BuildParseTree = true
                Parser.RemoveErrorListeners()
                Parser.AddErrorListener(ErrorListener{ FileDir = file })

                AST := Parser.program()

                Visitor := FeelLangVisitor{}
                Result := Visitor.Visit(AST)

                # "文件流写文件,使用覆盖模式"
                # "转换为字节"
                ByteResult := Encoding.UTF8.GetBytes(Result.to_str())  
                -> fsWrite := FileStream("${_ReadPath; file.replace(".feel", ".cs")}", FileMode.Create) {
                    fsWrite.Write(ByteResult, 0, ByteResult.Length)
                }
            } err {
                print(err)
                <-
            }
        }
    }

    Folders := Directory.GetDirectories(path)
    @ folder := Folders {
        Compiled(folder)
    }
}

##FileStream
##AntlrInputStream
##FeelLexer
##CommonTokenStream
##FeelParser
