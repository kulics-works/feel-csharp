<- Compiler

-> {
    Antlr4.Runtime
    Antlr4.Runtime.Misc
    System
    System.Collections.Generic

    . = Compiler.FeelParser
    . = Compiler.Compiler_static
}


!keywords = {
    "abstract"
    "as"
    "base"
    "bool"
    "break"
    "byte"
    "case"
    "catch"
    "char"
    "checked"
    "class"
    "const"
    "continue"
    "decimal"
    "default"
    "delegate"
    "do"
    "double"
    "enum"
    "event"
    "explicit"
    "extern"
    "false"
    "finally"
    "fixed"
    "float"
    "for"
    "foreach"
    "goto"
    "implicit"
    "in"
    "int"
    "interface"
    "internal"
    "is"
    "lock"
    "long"
    "namespace"
    "new"
    "null"
    "object"
    "operator"
    "out"
    "override"
    "params"
    "private"
    "protected"
    "public"
    "readonly"
    "ref"
    "return"
    "sbyte"
    "sealed"
    "short"
    "sizeof"
    "stackalloc"
    "static"
    "string"
    "struct"
    "switch"
    "this"
    "throw"
    "true"
    "try"
    "uint"
    "ulong"
    "unchecked"
    "unsafe"
    "ushort"
    "using"
    "virtual"
    "void"
    "volatile"
    "while"
}

TemplateItem = $ {
    !Template: str
    !Contract: str
}

DicEle = $ {
    !key: str
    !value: str
    !text: str
}

FeelLangVisitor = $ me {
    .VisitVarStatement = (context: VarStatementContext -> v: any) {
        !obj = ""
        context.varId() @ [i]v {
            i >< 0 ? {
                obj += "," + Visit(v)
            } | _ {
                obj += Visit(v)
            }
        }
        context.varId().Length > 1 ? {
            obj = "(" + obj + ")"
        }
        r2 = Visit(context.tupleExpression())!: Result
        obj += " = ${r2.text; Terminate; Wrap}"
        <- obj
    }

    .VisitVarTypeStatement = (context: VarTypeStatementContext -> v: any) {
        !obj = ""
        context.varIdType() @ [i]v {
            i >< 0 ? {
                obj += "," + Visit(v)
            } | _ {
                obj += Visit(v)
            }
        }
        context.varIdType().Length > 1 ? {
            obj = "(" + obj + ")"
        }
        r2 = Visit(context.tupleExpression())!: Result
        obj += " = ${r2.text; Terminate; Wrap}"
        <- obj
    }

    .VisitBindStatement = (context: BindStatementContext -> v: any) {
        !obj = ""
        context.constId() @ [i]v {
            i >< 0 ? {
                obj += "," + Visit(v)
            } | _ {
                obj += Visit(v)
            }
        }
        context.constId().Length > 1 ? {
            obj = "(" + obj + ")"
        }
        r2 = Visit(context.tupleExpression())!: Result
        obj += " = ${r2.text; Terminate; Wrap}"
        <- obj
    }

    .VisitBindTypeStatement = (context: BindTypeStatementContext -> v: any) {
        !obj = ""
        context.constIdType() @ [i]v {
            i >< 0 ? {
                obj += "," + Visit(v)
            } | _ {
                obj += Visit(v)
            }
        }
        context.constIdType().Length > 1 ? {
            obj = "(" + obj + ")"
        }
        r2 = Visit(context.tupleExpression())!: Result
        obj += " = ${r2.text; Terminate; Wrap}"
        <- obj
    }

    .VisitVariableDeclaredStatement = (context: VariableDeclaredStatementContext -> v: any) {
        !obj = ""
        Type = Visit(context.typeType())!: str
        r = Visit(context.id())!: Result
        ~~me.has_id(r.text) ? {
            me.add_id(r.text)
        }
        obj = "${Type} ${r.text; Terminate; Wrap}"
        <- obj
    }

    .VisitConstantDeclaredStatement = (context: ConstantDeclaredStatementContext -> v: any) {
        !obj = ""
        Type = Visit(context.typeType())!: str
        r = Visit(context.id())!: Result
        ~~me.has_id(r.text) ? {
            me.add_id(r.text)
        }
        obj = "${Type} ${r.text; Terminate; Wrap}"
        <- obj
    }

    .VisitAssignStatement = (context: AssignStatementContext -> v: any) {
        r1 = Visit(context.tupleExpression(0))!: Result
        r2 = Visit(context.tupleExpression(1))!: Result
        !obj = r1.text + Visit(context.assign()) + r2.text + Terminate + Wrap
        <- obj
    }

    .VisitAssign = (context: AssignContext -> v: any) {
        <- context.op.Text
    }

    .VisitExpressionStatement = (context: ExpressionStatementContext -> v: any) {
        r = Visit(context.expression())!: Result
        <- r.text + Terminate + Wrap
    }

    .VisitExpression = (context: ExpressionContext -> v: any) {
        count = context.ChildCount
        !r = Result{}
        count => 
            | 3 ? {
                !e1 = Visit(context.GetChild(0))!: Result
                !e2 = Visit(context.GetChild(2))
                !op = Visit(context.GetChild(1))

                context.GetChild(1) => 
                    | _: CompareCombineContext ? {
                        r.data = I32
                        s1 = e1.text
                        s2 = (e2!: Result).text
                        r.text = "${s1} > ${s2} ? 1 : ( ${s1}==${s2} ? 0 : -1 )"
                        <- r
                    }
                    | _: IteratorContext ? {
                        fn = op!: (Result, Result->Result)
                        r = fn(e1, e2!: Result)
                        <- r
                    }
                    | _: CompareContext ? {
                        # "todo 如果左右不是bool类型值，报错"
                        r.data = Bool
                    }
                    | _: LogicContext ? {
                        # "todo 如果左右不是bool类型值，报错"
                        r.data = Bool
                    }
                    | _: AddContext ? {
                        # "todo 如果左右不是number或text类型值，报错"
                        e1.data!: str == Str || (e2!: Result).data!: str == Str ? {
                            r.data = Str
                        } | e1.data!: str == I32 && (e2!: Result).data!: str == I32 ? {
                            r.data = I32
                        } | _ {
                            r.data = F64
                        }
                    }
                    | _: MulContext ? {
                        # "todo 如果左右不是number类型值，报错"
                        e1.data!: str == I32 && (e2!: Result).data!: str == I32 ? {
                            r.data = I32
                        } | _ {
                            r.data = F64
                        }
                    }
                    | _: PowContext ? {
                        # "todo 如果左右不是number类型，报错"
                        r.data = F64
                        r.text = "${op}(${e1.text}, ${(e2!: Result).text})"
                        <- r
                    }
                r.text = e1.text + op + (e2!: Result).text
            }
            | 2 ? {
                r = Visit(context.GetChild(0))!: Result
                context.GetChild(1) => 
                    | it: TypeConversionContext ? {
                        e2 = Visit(it)!: str
                        r.data = e2
                        r.text = "(${e2})(${r.text})"
                    }
                    | it: TypeCheckContext ? {
                        e2 = Visit(it)!: str
                        r.data = e2
                        r.text = "${r.text}.@is<${e2}>()"
                    }
                    | it: OrElseContext ? {
                        e2 = Visit(it)!: Result
                        r.text = "(${r.text}??${e2.text})"
                    }
                    | it: CallExpressionContext ? {
                        e2 = Visit(it)!: Result
                        r.text = r.text + e2.text
                    }
                    | it: CallFuncContext ? {
                        e2 = Visit(it)!: Result
                        me.is_type(r.rootID) ? {
                            r.text = "(new ${r.text; e2.text})"
                            r.data = r.rootID
                        } | _ {
                            r.text = r.text + e2.text
                        }
                    }
                    | it: CallAsyncContext ? {
                        e2 = Visit(it)!: Result
                        r.text = r.text + e2.text
                    }
                    | it: CallAwaitContext ? {
                        e2 = Visit(it)!: Result
                        r.text = "await " + r.text + e2.text
                        set_func_async()
                    }
                    | it: CallElementContext ? {
                        e2 = Visit(it)!: Result
                        r.text = r.text + e2.text
                    }
                    | it: JudgeCaseExpressionContext ? {
                        e2 = Visit(it)!: (str->Result)
                        r.text = e2(r.text).text
                    }
                    | it: JudgeExpressionContext ? {
                        e2 = Visit(it)!: (str->Result)
                        r.text = e2(r.text).text
                    }
                    | it: LoopExpressionContext ? {
                        e2 = Visit(it)!: (str->Result)
                        r.text = e2(r.text).text
                    }
                    | _ {
                        context.op.Type == FeelParser.Bang ? {
                            r.text = "ref ${r.text}"
                        } | context.op.Type == FeelParser.Question ? {
                            r.text += "?"
                        }
                    }
            }
            | 1 ? {
                r = Visit(context.GetChild(0))!: Result
            }
        <- r
    }

    .VisitOrElse = (context: OrElseContext -> v: any) {
        <- Visit(context.expression())!: Result
    }

    .VisitTypeConversion = (context: TypeConversionContext -> v: any) {
        <- Visit(context.typeType())!: str
    }

    .VisitTypeCheck = (context: TypeCheckContext -> v: any) {
        <- Visit(context.typeType())!: str
    }

    .VisitCall = (context: CallContext -> v: any) {
        <- context.op.Text
    }

    .VisitWave = (context: WaveContext -> v: any) {
        <- context.op.Text
    }

    .VisitBitwise = (context: BitwiseContext -> v: any) {
        <- me.Visit(context.GetChild(0))!: str
    }

    .VisitBitwiseAnd = (context: BitwiseAndContext -> v: any) {
        <- "&"
    }

    .VisitBitwiseOr = (context: BitwiseOrContext -> v: any) {
        <- "|"
    }

    .VisitBitwiseXor = (context: BitwiseXorContext -> v: any) {
        <- "^"
    }

    .VisitBitwiseLeftShift = (context: BitwiseLeftShiftContext -> v: any) {
        <- "<<"
    }

    .VisitBitwiseRightShift = (context: BitwiseRightShiftContext -> v: any) {
        <- ">>"
    }

    .VisitCompare = (context: CompareContext -> v: any) {
        context.op.Type == Not_Equal ? {
            <- "!="
        }
        <- context.op.Text
    }

    .VisitLogic = (context: LogicContext -> v: any) {
        <- context.op.Text
    }

    .VisitAdd = (context: AddContext -> v: any) {
        <- context.op.Text
    }

    .VisitMul = (context: MulContext -> v: any) {
        <- context.op.Text
    }

    .VisitPow = (context: PowContext -> v: any) {
        <- "pow"
    }

    .VisitPrimaryExpression = (context: PrimaryExpressionContext -> v: any) {
        context.ChildCount == 1 ? {
            c = context.GetChild(0)
            c?: DataStatementContext ? {
                <- Visit(context.dataStatement())
            } | c?: IdContext ? {
                <- Visit(context.id())
            } | context.t.Type == Discard ? {
                <- Result{
                    text = "_"
                    data = "var"
                }
            }
        } | context.ChildCount == 2 ? {
            id = Visit(context.id())!: Result
            template = "<" + (Visit(context.templateCall())!: str) + ">"
            <- Result{
                text = id.text + template
                data = id.text + template
                rootID = id.text
            }
        }
        r = Visit(context.expression())!: Result
        <- Result{
            text = "(${r.text})"
            data = r.data
        }
    }

    .VisitExpressionList = (context: ExpressionListContext -> v: any) {
        r = Result{}
        !obj = ""
        0 .. context.expression().Length-1 @ i {
            temp = Visit(context.expression(i))!: Result
            i == 0 ? {
                obj += temp.text
            } | _ {
                obj += ", " + temp.text
            }
        }
        r.text = obj
        r.data = "var"
        <- r
    }

    .VisitTemplateDefine = (context: TemplateDefineContext -> v: any) {
        item = TemplateItem{}
        item.Template += "<"
        0 .. context.templateDefineItem().Length-1 @ i {
            i > 0 ? {
                item.Template += ","
                item.Contract.len() > 0 ? {
                    item.Contract += ","
                }
            }
            r = Visit(context.templateDefineItem(i))!: TemplateItem
            item.Template += r.Template
            item.Contract += r.Contract
        }
        item.Template += ">"
        <- item
    }

    .VisitTemplateDefineItem = (context: TemplateDefineItemContext -> v: any) {
        item = TemplateItem{}
        context.id().len() == 1 ? {
            id1 = context.id(0).GetText()
            item.Template = id1
        } | _ {
            id1 = context.id(0).GetText()
            item.Template = id1
            id2 = context.id(1).GetText()
            item.Contract = " where ${id1}:${id2}"
        }
        <- item
    }

    .VisitTemplateCall = (context: TemplateCallContext -> v: any) {
        !obj = ""
        0 .. context.typeType().Length-1 @ i {
            i > 0 ? {
                obj += ","
            }
            r = Visit(context.typeType(i))
            obj += r
        }
        <- obj
    }

    .VisitDataStatement = (context: DataStatementContext -> v: any) {
        r = Result{}
        context.nilExpr() >< nil ? {
            r.data = Any
            r.text = "null"
        } | context.floatExpr() >< nil ? {
            r.data = F64
            r.text = Visit(context.floatExpr())!: str
        } | context.integerExpr() >< nil ? {
            r.data = I32
            r.text = Visit(context.integerExpr())!: str
        } | context.rawStringExpr() >< nil ? {
            r.data = Str
            r.text = Visit(context.rawStringExpr())!: str
        } | context.stringExpr() >< nil ? {
            r.data = Str
            r.text = Visit(context.stringExpr())!: str
        } | context.t.Type == FeelParser.CharLiteral ? {
            r.data = Chr
            r.text = context.CharLiteral().GetText()
        } | context.t.Type == FeelParser.TrueLiteral ? {
            r.data = Bool
            r.text = T
        } | context.t.Type == FeelParser.FalseLiteral ? {
            r.data = Bool
            r.text = F
        } 
        <- r
    }

    .VisitStringExpr = (context: StringExprContext -> v: any) {
        !text = ""
        context.stringTemplate().Length == 0 ? {
            context.stringContent() @ v {
                text += Visit(v)
            }
            <- "\"${text}\""
        } | _ {
            text = "(new System.Text.StringBuilder()"
            # "去除前后一个元素"
            1 .. context.ChildCount-2 @ i {
                v = context.GetChild(i)
                r = Visit(context.GetChild(i))!: str
                v?: StringContentContext ? {
                    text += ".Append(\"${r}\")"
                } | _ {
                    text += r
                }
            }
            text += ").to_str()"
            <- text
        }
    }

    .VisitStringContent = (context: StringContentContext -> v: any) {
        context.TextLiteral().GetText() == "\\$" ? {
            <- "$"
        }
        <- context.TextLiteral().GetText() 
    }

    .VisitStringTemplate = (context: StringTemplateContext -> v: any) {
        !text = ""
        context.expression() @ v {
            r = Visit(v)!: Result
            text += ".Append(${r.text})"
        }
        <- text
    }

    .VisitRawStringExpr = (context: RawStringExprContext -> v: any) {
        !text = ""
        context.rawStringTemplate().Length == 0 ? {
            # "去除前后一个元素"
            1 .. context.ChildCount-2 @ i {
                v = context.GetChild(i)
                r = Visit(context.GetChild(i))!: str
                v?: RawStringContentContext ? {
                    text += r
                } | _ {
                    text += "\"\""
                }
            }
            <- "@\"${text}\""
        } | _ {
            text = "(new System.Text.StringBuilder()"
            # "去除前后一个元素"
            1 .. context.ChildCount-2 @ i {
                v = context.GetChild(i)
                r = Visit(context.GetChild(i))!: str
                v?: RawStringContentContext ? {
                    text += ".Append(@\"${r}\")"
                } | v?: RawStringTemplateContext ? {
                    text += r
                } | _ {
                    text += ".Append('\"')"
                }
            }
            text += ").to_str()"
            <- text
        }
    }

    .VisitRawStringContent = (context: RawStringContentContext -> v: any) {
        context.RawTextLiteral().GetText() == "\\$" ? {
            <- "$"
        }
        <- context.RawTextLiteral().GetText()
    }

    .VisitRawStringTemplate = (context: RawStringTemplateContext -> v: any) {
        !text = ""
        context.expression() @ v {
            r = Visit(v)!: Result
            text += ".Append(${r.text})"
        }
        <- text
    }

    .VisitFloatExpr = (context: FloatExprContext -> v: any) {
        number = context.FloatLiteral().GetText()
        <- number
    }

    .VisitIntegerExpr = (context: IntegerExprContext -> v: any) {
        number = context.GetChild(0).GetText()
        <- number
    }

    .VisitPlusMinus = (context: PlusMinusContext -> v: any) {
        r = Result{}
        expr = Visit(context.expression())!: Result
        op = Visit(context.add())
        r.data = expr.data
        r.text = op + expr.text
        <- r
    }

    .VisitNegate = (context: NegateContext -> v: any) {
        r = Result{}
        expr = Visit(context.expression())!: Result
        r.data = expr.data
        r.text = "!" + expr.text
        <- r
    }

    .VisitBitwiseNotExpression = (context: BitwiseNotExpressionContext -> v: any) {
        r = Result{}
        expr = Visit(context.expression())!: Result
        r.data = expr.data
        r.text = "~" + expr.text
        <- r
    }

    .VisitLinq = (context: LinqContext -> v: any) {
        r = Result{data = "var"}
        r.text += Visit(context.linqHeadItem())!: str
        context.linqItem() @ item {
            r.text += "${Visit(item)} "
        }
        r.text += "${(Visit(context.id())!: Result).text} ${(Visit(context.expression())!: Result).text}"
        <- r
    }

    .VisitLinqItem = (context: LinqItemContext -> v: any) {
        context.linqHeadItem() >< nil ? {
            <- Visit(context.linqHeadItem())!: str
        }
        !obj = (Visit(context.id())!: Result).text
        context.expression() >< nil ? {
            obj += " ${(Visit(context.expression())!: Result).text}"
        }
        <- obj
    }

    .VisitLinqHeadItem = (context: LinqHeadItemContext -> v: any) {
        !obj = ""
        id = Visit(context.id())!: Result
        obj += "from ${id.text} in ${(Visit(context.expression())!: Result).text} "
        <- obj
    }
}
