<- Compiler

-> {
    Antlr4.Runtime
    Antlr4.Runtime.Misc
    System
    System.Collections.Generic

    . = Compiler.FeelParser
    . = Compiler.Compiler_static
}


keywords = {
    "abstract"
    "as"
    "base"
    "bool"
    "break"
    "byte"
    "case"
    "catch"
    "char"
    "checked"
    "class"
    "const"
    "continue"
    "decimal"
    "default"
    "delegate"
    "do"
    "double"
    "enum"
    "event"
    "explicit"
    "extern"
    "false"
    "finally"
    "fixed"
    "float"
    "for"
    "foreach"
    "goto"
    "implicit"
    "in"
    "int"
    "interface"
    "internal"
    "is"
    "lock"
    "long"
    "namespace"
    "new"
    "null"
    "object"
    "operator"
    "out"
    "override"
    "params"
    "private"
    "protected"
    "public"
    "readonly"
    "ref"
    "return"
    "sbyte"
    "sealed"
    "short"
    "sizeof"
    "stackalloc"
    "static"
    "string"
    "struct"
    "switch"
    "this"
    "throw"
    "true"
    "try"
    "uint"
    "ulong"
    "unchecked"
    "unsafe"
    "ushort"
    "using"
    "virtual"
    "void"
    "volatile"
    "while"
}

TemplateItem = $ {
    template: Str
    contract: Str
}

DicEle = $ {
    key: Str
    value: Str
    text: Str
}

FeelLangVisitor = $ me {
    .VisitBindStatement = (context : BindStatementContext -> v : Any) {
        obj = ""
        context.varId() @ [i]v {
            i <> 0 ? {
                obj += "," + Visit(v)
            }
            | ? {
                obj += Visit(v)
            }
        }
        context.varId().Length > 1 ? {
            obj = "(" + obj + ")"
        }
        r2 = Visit(context.tupleExpression()) ! Result
        obj += " = \{r2.text; Terminate; Wrap}"
        <- obj
    }

    .VisitBindTypeStatement = (context : BindTypeStatementContext -> v : Any) {
        obj = ""
        context.varIdType() @ [i]v {
            i <> 0 ? {
                obj += "," + Visit(v)
            }
            | ? {
                obj += Visit(v)
            }
        }
        context.varIdType().Length > 1 ? {
            obj = "(" + obj + ")"
        }
        r2 = Visit(context.tupleExpression()) ! Result
        obj += " = \{r2.text; Terminate; Wrap}"
        <- obj
    }

    .VisitVariableDeclaredStatement = (context : VariableDeclaredStatementContext -> v : Any) {
        obj = ""
        Type = Visit(context.typeType()) ! Str
        r = Visit(context.id()) ! Result
        ~~me.Has_ID(r.text) ? {
            me.Add_ID(r.text)
        }
        obj = "\{Type} \{r.text; Terminate; Wrap}"
        <- obj
    }

    .VisitAssignStatement = (context : AssignStatementContext -> v : Any) {
        r1 = Visit(context.tupleExpression(0)) ! Result
        r2 = Visit(context.tupleExpression(1)) ! Result
        obj = r1.text + Visit(context.assign()) + r2.text + Terminate + Wrap
        <- obj
    }

    .VisitAssign = (context : AssignContext -> v : Any) {
        <- context.op.Text
    }

    .VisitExpressionStatement = (context : ExpressionStatementContext -> v : Any) {
        r = Visit(context.expression()) ! Result
        <- r.text + Terminate + Wrap
    }

    .VisitExpression = (context : ExpressionContext -> v : Any) {
        count = context.ChildCount
        r = Result{}
        count == 
        | 3 ? {
            e1 = Visit(context.GetChild(0)) ! Result
            e2 = Visit(context.GetChild(2))
            op = Visit(context.GetChild(1))

            context.GetChild(1) :: 
            | CompareContext ? {
                r.data = TargetTypeBool
            }
            | LogicContext ? {
                r.data = TargetTypeBool
            }
            | AddContext ? {
                e1.data ! Str == TargetTypeStr || (e2 ! Result).data ! Str == TargetTypeStr ? {
                    r.data = TargetTypeStr
                }
                | e1.data ! Str == TargetTypeI32 && (e2 ! Result).data ! Str == TargetTypeI32 ? {
                    r.data = TargetTypeI32
                }
                | ? {
                    r.data = TargetTypeF64
                }
            }
            | MulContext ? {
                e1.data ! Str == TargetTypeI32 && (e2 ! Result).data ! Str == TargetTypeI32 ? {
                    r.data = TargetTypeI32
                }
                | ? {
                    r.data = TargetTypeF64
                }
            }
            | PowContext ? {
                r.data = TargetTypeF64
                r.text = "\{op}(\{e1.text}, \{(e2 ! Result).text})"
                <- r
            }
            r.text = e1.text + op + (e2 ! Result).text
        }
        | 2 ? {
            r = Visit(context.GetChild(0)) ! Result
            context.GetChild(1) :: 
            | IteratorContext => it ? {
                fn = Visit(it) ! (Result->Result)
                <- fn(r)
            }
            | TypeConversionContext => it ? {
                e2 = Visit(it) ! Str
                r.data = e2
                r.text = "(\{e2})(\{r.text})"
            }
            | TypeCheckContext => it ? {
                e2 = Visit(it) ! Str
                r.data = e2
                r.text = "(\{r.text} is \{e2})"
            }
            | OrElseContext => it ? {
                e2 = Visit(it) ! Result
                r.text = "(\{r.text}??\{e2.text})"
            }
            | CallExpressionContext => it ? {
                e2 = Visit(it) ! Result
                r.text = r.text + e2.text
            }
            | CallFuncContext => it ? {
                e2 = Visit(it) ! Result
                me.Is_type(r.rootID) ? {
                    r.text = "(new \{r.text; e2.text})"
                    r.data = r.rootID
                }
                | ? {
                    r.text = r.text + e2.text
                }
            }
            | CallAsyncContext => it ? {
                e2 = Visit(it) ! Result
                r.text = r.text + e2.text
            }
            | CallAwaitContext => it ? {
                e2 = Visit(it) ! Result
                r.text = "await " + r.text + e2.text
                Set_func_async()
            }
            | CallElementContext => it ? {
                e2 = Visit(it) ! Result
                r.text = r.text + e2.text
            }
            | ? {
                context.op.Type == FeelParser.Bang ? {
                    r.text = "ref \{r.text}"
                }
                | context.op.Type == FeelParser.Question ? {
                    r.text += "?"
                }
            }
        }
        | 1 ? {
            r = Visit(context.GetChild(0)) ! Result
        }
        <- r
    }

    .VisitOrElse = (context : OrElseContext -> v : Any) {
        <- Visit(context.expression()) ! Result
    }

    .VisitTypeConversion = (context : TypeConversionContext -> v : Any) {
        <- Visit(context.typeType()) ! Str
    }

    .VisitTypeCheck = (context : TypeCheckContext -> v : Any) {
        <- Visit(context.typeType()) ! Str
    }

    .VisitCall = (context : CallContext -> v : Any) {
        <- context.op.Text
    }

    .VisitWave = (context : WaveContext -> v : Any) {
        <- context.op.Text
    }

    .VisitBitwise = (context : BitwiseContext -> v : Any) {
        <- me.Visit(context.GetChild(0)) ! Str
    }

    .VisitBitwiseAnd = (context : BitwiseAndContext -> v : Any) {
        <- "&"
    }

    .VisitBitwiseOr = (context : BitwiseOrContext -> v : Any) {
        <- "|"
    }

    .VisitBitwiseXor = (context : BitwiseXorContext -> v : Any) {
        <- "^"
    }

    .VisitBitwiseLeftShift = (context : BitwiseLeftShiftContext -> v : Any) {
        <- "<<"
    }

    .VisitBitwiseRightShift = (context : BitwiseRightShiftContext -> v : Any) {
        <- ">>"
    }

    .VisitCompare = (context : CompareContext -> v : Any) {
        context.op.Type == Not_Equal ? {
            <- "!="
        }
        <- context.op.Text
    }

    .VisitLogic = (context : LogicContext -> v : Any) {
        <- context.op.Text
    }

    .VisitAdd = (context : AddContext -> v : Any) {
        <- context.op.Text
    }

    .VisitMul = (context : MulContext -> v : Any) {
        <- context.op.Text
    }

    .VisitPow = (context : PowContext -> v : Any) {
        <- "Pow"
    }

    .VisitPrimaryExpression = (context : PrimaryExpressionContext -> v : Any) {
        context.ChildCount == 
        | 1 ? {
            c = context.GetChild(0)
            c ::
            | DataStatementContext ? {
                <- Visit(context.dataStatement())
            }
            | IdContext ? {
                <- Visit(context.id())
            }
            context.t.Type == Discard ? {
                <- Result{
                    text = "_"
                    data = "var"
                }
            }
        }
        | 4 ? {
            id = Visit(context.id()) ! Result
            template = "<" + (Visit(context.templateCall()) ! Str) + ">"
            <- Result{
                text = id.text + template
                data = id.text + template
                rootID = id.text
            }
        }
        r = Visit(context.expression()) ! Result
        <- Result{
            text = "(\{r.text})"
            data = r.data
        }
    }

    .VisitExpressionList = (context : ExpressionListContext -> v : Any) {
        r = Result{}
        obj = ""
        0 .. context.expression().Length @ i {
            temp = Visit(context.expression(i)) ! Result
            i == 0 ? {
                obj += temp.text
            }
            | ? {
                obj += ", " + temp.text
            }
        }
        r.text = obj
        r.data = "var"
        <- r
    }

    .VisitTemplateDefine = (context : TemplateDefineContext -> v : Any) {
        item = TemplateItem{}
        item.template += "<"
        0 .. context.templateDefineItem().Length @ i {
            i > 0 ? {
                item.template += ","
                item.contract.Size() > 0 ? {
                    item.contract += ","
                }
            }
            r = Visit(context.templateDefineItem(i)) ! TemplateItem
            item.template += r.template
            item.contract += r.contract
        }
        item.template += ">"
        <- item
    }

    .VisitTemplateDefineItem = (context : TemplateDefineItemContext -> v : Any) {
        item = TemplateItem{}
        context.id().Size() == 1 ? {
            id1 = context.id(0).GetText()
            item.template = id1
        }
        | ? {
            id1 = context.id(0).GetText()
            item.template = id1
            id2 = context.id(1).GetText()
            item.contract = " where \{id1}:\{id2}"
        }
        <- item
    }

    .VisitTemplateCall = (context : TemplateCallContext -> v : Any) {
        obj = ""
        0 .. context.typeType().Length @ i {
            i > 0 ? {
                obj += ","
            }
            r = Visit(context.typeType(i))
            obj += r
        }
        <- obj
    }

    .VisitDataStatement = (context : DataStatementContext -> v : Any) {
        r = Result{}
        context.nilExpr() <> nil ? {
            r.data = TargetTypeAny
            r.text = "null"
        }
        | context.floatExpr() <> nil ? {
            r.data = TargetTypeF64
            r.text = Visit(context.floatExpr()) ! Str
        }
        | context.integerExpr() <> nil ? {
            r.data = TargetTypeI32
            r.text = Visit(context.integerExpr()) ! Str
        }
        | context.rawStringExpr() <> nil ? {
            r.data = TargetTypeStr
            r.text = Visit(context.rawStringExpr()) ! Str
        }
        | context.stringExpr() <> nil ? {
            r.data = TargetTypeStr
            r.text = Visit(context.stringExpr()) ! Str
        }
        | context.t.Type == FeelParser.CharLiteral ? {
            r.data = TargetTypeChr
            r.text = context.CharLiteral().GetText()
        }
        | context.t.Type == FeelParser.TrueLiteral ? {
            r.data = TargetTypeBool
            r.text = T
        }
        | context.t.Type == FeelParser.FalseLiteral ? {
            r.data = TargetTypeBool
            r.text = F
        }
        <- r
    }

    .VisitStringExpr = (context : StringExprContext -> v : Any) {
        text = ""
        context.stringTemplate().Length == 0 ? {
            context.stringContent() @ v {
                text += Visit(v)
            }
            <- "\"\{text}\""
        }
        | ? {
            text = "(new System.Text.StringBuilder()"

            1 .. context.ChildCount-1 @ i {
                v = context.GetChild(i)
                r = Visit(context.GetChild(i)) ! Str
                v ::
                | StringContentContext ? {
                    text += ".Append(\"\{r}\")"
                }
                | ? {
                    text += r
                }
            }
            text += ").To_Str()"
            <- text
        }
    }

    .VisitStringContent = (context : StringContentContext -> v : Any) {
        context.TextLiteral().GetText() == "\\$" ? {
            <- "$"
        }
        <- context.TextLiteral().GetText() 
    }

    .VisitStringTemplate = (context : StringTemplateContext -> v : Any) {
        text = ""
        context.expression() @ v {
            r = Visit(v) ! Result
            text += ".Append(\{r.text})"
        }
        <- text
    }

    .VisitRawStringExpr = (context : RawStringExprContext -> v : Any) {
        text = ""
        context.rawStringTemplate().Length == 0 ? {

            1 .. context.ChildCount-1 @ i {
                v = context.GetChild(i)
                r = Visit(context.GetChild(i)) ! Str
                v ::
                | RawStringContentContext ? {
                    text += r
                }
                | ? {
                    text += "\"\""
                }
            }
            <- "@\"\{text}\""
        }
        | ? {
            text = "(new System.Text.StringBuilder()"

            1 .. context.ChildCount-1 @ i {
                v = context.GetChild(i)
                r = Visit(context.GetChild(i)) ! Str
                v :: 
                | RawStringContentContext ? {
                    text += ".Append(@\"\{r}\")"
                }
                | RawStringTemplateContext ? {
                    text += r
                }
                | ? {
                    text += ".Append('\"')"
                }
            }
            text += ").To_Str()"
            <- text
        }
    }

    .VisitRawStringContent = (context : RawStringContentContext -> v : Any) {
        context.RawTextLiteral().GetText() == "\\\\" ? {
            <- "\\"
        }
        <- context.RawTextLiteral().GetText()
    }

    .VisitRawStringTemplate = (context : RawStringTemplateContext -> v : Any) {
        text = ""
        context.expression() @ v {
            r = Visit(v) ! Result
            text += ".Append(\{r.text})"
        }
        <- text
    }

    .VisitFloatExpr = (context : FloatExprContext -> v : Any) {
        number = context.FloatLiteral().GetText()
        <- number
    }

    .VisitIntegerExpr = (context : IntegerExprContext -> v : Any) {
        number = context.GetChild(0).GetText()
        <- number
    }

    .VisitPlusMinus = (context : PlusMinusContext -> v : Any) {
        r = Result{}
        expr = Visit(context.expression()) ! Result
        op = Visit(context.add())
        r.data = expr.data
        r.text = op + expr.text
        <- r
    }

    .VisitNegate = (context : NegateContext -> v : Any) {
        r = Result{}
        expr = Visit(context.expression()) ! Result
        r.data = expr.data
        r.text = "!" + expr.text
        <- r
    }

    .VisitBitwiseNotExpression = (context : BitwiseNotExpressionContext -> v : Any) {
        r = Result{}
        expr = Visit(context.expression()) ! Result
        r.data = expr.data
        r.text = "~" + expr.text
        <- r
    }
}
