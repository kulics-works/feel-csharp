# Compiler

# {
    Antlr4.Runtime
    Antlr4.Runtime.Misc
    System
    System.Collections.Generic

    . = Compiler.FeelParser
    . = Compiler.Compiler_static
}

Terminate = ";"
Wrap = "\r\n"

TargetTypeAny = "object"
TargetTypeInt = "int"
TargetTypeNum = "double"
TargetTypeI8  = "sbyte"
TargetTypeI16 = "short"
TargetTypeI32 = "int"
TargetTypeI64 = "long"

TargetTypeU8  = "byte"
TargetTypeU16 = "ushort"
TargetTypeU32 = "uint"
TargetTypeU64 = "ulong"

TargetTypeF32 = "float"
TargetTypeF64 = "double"

TargetTypeBool = "bool"
T = "true"
F = "false"

TargetTypeChr = "char"
TargetTypeStr = "string"
TargetTypeLst = "List"
TargetTypeSet = "Hashset"
TargetTypeDic = "Dictionary"

BlockLeft   = "{"
BlockRight  = "}"

Task = "System.Threading.Tasks.Task"

keywords : List[Str] = List_of(
    "abstract",
    "as",
    "base",
    "bool",
    "break",
    "byte",
    "case",
    "catch",
    "char",
    "checked",
    "class",
    "const",
    "continue",
    "decimal",
    "default",
    "delegate",
    "do",
    "double",
    "enum",
    "event",
    "explicit",
    "extern",
    "false",
    "finally",
    "fixed",
    "float",
    "for",
    "foreach",
    "goto",
    "implicit",
    "in",
    "int",
    "interface",
    "internal",
    "is",
    "lock",
    "long",
    "namespace",
    "new",
    "null",
    "object",
    "operator",
    "out",
    "override",
    "params",
    "private",
    "protected",
    "public",
    "readonly",
    "ref",
    "return",
    "sbyte",
    "sealed",
    "short",
    "sizeof",
    "stackalloc",
    "static",
    "string",
    "struct",
    "switch",
    "this",
    "throw",
    "true",
    "try",
    "uint",
    "ulong",
    "unchecked",
    "unsafe",
    "ushort",
    "using",
    "virtual",
    "void",
    "volatile",
    "while"
)

Namespace = $ (
    name    : Str,
    imports : Str
) {}

Result = $ (
    data : Any,
    text : Str,

    permission  : Str,
    is_virtual  : Bool,
    isDefine    : Bool,
    isMutable   : Bool,
    rootID      : Str
) {}

Result = (data: Any = nil, text: Str = ""->$) {
    this.data = data
    this.text = text
    this.permission = "public"
    this.is_virtual = false
    this.isDefine = false
    this.isMutable = false
}

FeelLangVisitorCore = $ (
    self_ID : Str,
    super_ID : Str,

    self_property_content : List[Str],

    all_ID_set       : HashSet[Str],
    cuttent_ID_set   : Stack[HashSet[Str]],
    type_Id_set      : HashSet[Str],
    func_async_stack : Stack[Bool]
) {
    FeelParserBaseVisitor[Any]

    Has_ID = (id : Str -> v : Bool) {
        <- all_ID_set.Contains(id) || cuttent_ID_set.Peek().Contains(id)
    }

    Add_ID = (id : Str ->) {
        cuttent_ID_set.Peek().Add(id)
    }

    Add_current_set = (->) {
        @ item = cuttent_ID_set.Peek()... {
            all_ID_set.Add(item)
        }
        cuttent_ID_set.Push(HashSet[Str]$())
    }

    Delete_current_set = (->) {
        all_ID_set.ExceptWith(cuttent_ID_set.Peek())
        cuttent_ID_set.Pop()
    }

    Is_type = (id : Str->v : Bool) {
        <- type_Id_set.Contains(id)
    }

    Add_type = (id : Str ->) {
        type_Id_set.Add(id)
    }
    
    Add_func_stack = (->) {
        func_async_stack.Push(false)
    }

    Delete_func_stack = (->) {
        func_async_stack.Pop()
    }

    Get_func_async = (->v : Bool) {
        <- func_async_stack.Peek()
    }

    Set_func_async = (->) {
        ? func_async_stack.Peek() {
            <-
        }
        func_async_stack.Pop()
        func_async_stack.Push(true)
    }

    ProcessFunctionSupport = (items: Array[FunctionSupportStatementContext] -> v : Str) {
        obj = ""
        @ item = items... {
            obj += Visit(item)
        }
        <- obj
    }
}

FeelLangVisitorCore = (->$) {
    this.self_ID = ""
    this.super_ID = ""
    this.self_property_content = List[Str]$()
    this.all_ID_set = HashSet[Str]$()
    this.cuttent_ID_set = Stack[HashSet[Str]]$()
    this.type_Id_set = HashSet[Str]$()
    this.func_async_stack = Stack[Bool]$()
    this.cuttent_ID_set.Push(HashSet[Str]$())
    this.func_async_stack.Push(false)
}

FeelLangVisitorBase = $ () {
    FeelLangVisitorCore

    .VisitProgram = (context : ProgramContext -> v : Any) {
        StatethisntList = context.statement()
        result = ""
        @ item = StatethisntList... {
            result += VisitStatement(item)
        }
        <- result
    }

    .VisitId = (context : IdContext -> v : Any) {
        r = Result$("var")
        first = Visit(context.GetChild(0)).[Result]
        r.permission = first.permission
        r.text = first.text
        r.is_virtual = first.is_virtual
        ? context.ChildCount >= 2 {
            @ i = 1.Up_until(context.ChildCount)... {
                other = Visit(context.GetChild(i)).[Result]
                r.text += "_\{other.text}"
            }
        }

        ? r.text == self_ID {
            r.text = "this"
        } | r.text == super_ID {
            r.text = "base"
        } | keywords.Exists((t) {t == r.text}) {
            r.text = "@\{r.text}"
        }
        r.rootID = r.text
        <- r
    }

    .VisitIdItem = (context : IdItemContext -> v : Any) {
        r = Result$("var")
        ? context.typeAny() <> nil {
            r.text += context.typeAny().GetText()
            r.is_virtual = true
            <- r
        }
        id = context.Identifier().GetText()
        r.text += id
        r.is_virtual = true
        ? id.(0) == '_' {
            r.permission = "protected internal"
            ? id.(1).Is_lower() {
                r.isMutable = true
            }
        } | id.(0).Is_lower() {
            r.isMutable = true
        }
        <- r
    }

    .VisitVarId = (context : VarIdContext -> v : Any) {
        ? context.Discard() <> nil {
            <- "_"
        } | {
            id = Visit(context.id()).[Result].text
            ? this.Has_ID(id) {
                <- id
            } | {
                this.Add_ID(id)
                <- "var " + id
            }
        }
    }

    .VisitVarIdType = (context : VarIdTypeContext -> v : Any) {
        ? context.Discard() <> nil {
            <- "_"
        } | {
            id = Visit(context.id()).[Result].text
            ? ~~this.Has_ID(id) {
                this.Add_ID(id)
            }
            <- Visit(context.typeType()) + " " + id
        }
    }

    .VisitBoolExpr = (context : BoolExprContext -> v : Any) {
        r = Result$()
        ? context.t.Type == TrueLiteral {
            r.data = TargetTypeBool
            r.text = T
        } | context.t.Type == FalseLiteral {
            r.data = TargetTypeBool
            r.text = F
        }
        <- r
    }

    .VisitAnnotationSupport = (context : AnnotationSupportContext -> v : Any) {
        <- Visit(context.annotation()).[Str]
    }

    .VisitAnnotation = (context : AnnotationContext -> v : Any) {
        obj = ""

        r = Visit(context.annotationList()).[Str]
        ? r <> "" {
            obj += r
        }
        <- obj
    }

    .VisitAnnotationList = (context : AnnotationListContext -> v : Any) {
        obj = ""
        @ i, v = context.annotationItem().WithIndex()... {
            txt = this.Visit(v).[Str]
            ? txt <> "" {
                obj += txt
            }
        }
        <- obj
    }

    .VisitAnnotationItem = (context : AnnotationItemContext -> v : Any) {
        obj = ""
        id = ""
        
        ? context.id().Length == 2 {
            id = "\{(Visit(context.id(0)).[Result]).text}:"
            obj += Visit(context.id(1)).[Result].text
        } | {
            obj += Visit(context.id(0)).[Result].text
        }
        ? obj ==  "get" {
            this.self_property_content.Append( "get;")
            <- ""
        } | == "set" {
            this.self_property_content.Append( "set;")
            <- ""
        }
        
        ? context.tuple() <> nil {
            obj += Visit(context.tuple()).[Result].text
        }
        ? id <> "" {
            obj = id + obj
        }
        obj = "[" + obj + "]"
        <- obj
    }
}
