<- Compiler

-> {
    Antlr4.Runtime
    Antlr4.Runtime.Misc
    System
    System.Collections.Generic

    . = Compiler.FeelParser
    . = Compiler.Compiler_static
}

Terminate = ";"
Wrap = "\r\n"

TargetTypeAny = "object"
TargetTypeInt = "int"
TargetTypeNum = "double"
TargetTypeI8  = "sbyte"
TargetTypeI16 = "short"
TargetTypeI32 = "int"
TargetTypeI64 = "long"

TargetTypeU8  = "byte"
TargetTypeU16 = "ushort"
TargetTypeU32 = "uint"
TargetTypeU64 = "ulong"

TargetTypeF32 = "float"
TargetTypeF64 = "double"

TargetTypeBool    = "bool"
T       = "true"
F       = "false"

TargetTypeChr = "char"
TargetTypeStr = "string"
TargetTypeLst = "List"
TargetTypeSet = "Hashset"
TargetTypeDic = "Dictionary"

BlockLeft   = "{"
BlockRight  = "}"

Task = "System.Threading.Tasks.Task"

Result = $ {
    data : Any
    text : Str

    permission  : Str = "public"
    is_virtual   : Bool
    isDefine    : Bool
    isMutable   : Bool
    rootID      : Str = ""
}

FeelLangVisitor = $ me {
    (Any)FeelParserBaseVisitor

    self_ID     = ""
    super_ID    = ""
    set_ID      = ""
    get_ID      = ""

    self_property_ID         = ""
    self_property_content    = (Str)List{}
    self_property_variable   = false

    all_ID_set       = (Str)HashSet{}
    cuttent_ID_set   = ((Str)HashSet)Stack{}
    type_Id_set      = (Str)HashSet{}
    func_async_stack = (Bool)Stack{}

    Has_ID = (id : Str -> v : Bool) {
        <- me.all_ID_set.Contains(id) || me.cuttent_ID_set.Peek().Contains(id)
    }

    Add_ID = (id : Str ->) {
        me.cuttent_ID_set.Peek().Add(id)
    }

    Add_current_set = (->) {
        cuttent_ID_set.Peek() @ item {
            all_ID_set.Add(item)
        }
        me.cuttent_ID_set.Push((Str)HashSet{})
    }

    Delete_current_set = (->) {
        me.all_ID_set.ExceptWith(me.cuttent_ID_set.Peek())
        me.cuttent_ID_set.Pop()
    }

    Is_type = (id : Str->v : Bool) {
        <- me.type_Id_set.Contains(id)
    }

    Add_type = (id : Str ->) {
        me.type_Id_set.Add(id)
    }
    
    Add_func_stack = (->) {
        func_async_stack.Push(false)
    }

    Delete_func_stack = (->) {
        func_async_stack.Pop()
    }

    Get_func_async = (->v : Bool) {
        <- func_async_stack.Peek()
    }

    Set_func_async = (->) {
        func_async_stack.Peek() ? {
            <-
        }
        func_async_stack.Pop()
        func_async_stack.Push(true)
    }
}

FeelLangVisitor = (->$me) {
    me.cuttent_ID_set.Push((Str)HashSet{})
    func_async_stack.Push(false)
}

FeelLangVisitor = $ me {
    .VisitProgram = (context : ProgramContext -> v : Any) {
        StatementList = context.statement()
        result = ""
        StatementList @ item {
            result += VisitStatement(item)
        }
        <- result
    }

    .VisitId = (context : IdContext -> v : Any) {
        r = Result{data = "var"}
        first = Visit(context.GetChild(0)) ! Result
        r.permission = first.permission
        r.text = first.text
        r.is_virtual = first.is_virtual
        context.ChildCount >= 2 ? {
            1 .. context.ChildCount @ i {
                other = Visit(context.GetChild(i)) ! Result
                r.text += "_\{other.text}"
            }
        }

        keywords.Exists((t) {t == r.text}) ? {
            r.text = "@\{r.text}"
        }

        r.text == self_ID ? {
            r.text = "this"
        }
        | r.text == super_ID ? {
            r.text = "base"
        }
        | r.text == set_ID ? {
            r.text = "value"
        }
        | r.text == get_ID ? {
            r.text = "_" + self_property_ID
        }
        r.rootID = r.text
        <- r
    }

    .VisitIdItem = (context : IdItemContext -> v : Any) {
        r = Result{data = "var"}
        context.typeAny() <> nil ? {
            r.text += context.typeAny().GetText()
            r.is_virtual = true
            <- r
        }
        id = context.Identifier().GetText()
        r.text += id
        r.is_virtual = true
        id[0] == '_' ? {
            r.permission = "protected internal"
            id[1].Is_lower() ? {
                r.isMutable = true
            }
        }
        | id[0].Is_lower() ? {
            r.isMutable = true
        }
        <- r
    }

    .VisitVarId = (context : VarIdContext -> v : Any) {
        context.Discard() <> nil ? {
            <- "_"
        }
        | ? {
            id = (Visit(context.id()) ! Result).text
            me.Has_ID(id) ? {
                <- id
            }
            | ? {
                me.Add_ID(id)
                <- "var " + id
            }
        }
    }

    .VisitVarIdType = (context : VarIdTypeContext -> v : Any) {
        context.Discard() <> nil ? {
            <- "_"
        }
        | ? {
            id = (Visit(context.id()) ! Result).text
            ~~me.Has_ID(id) ? {
                me.Add_ID(id)
            }
            <- Visit(context.typeType()) + " " + id
        }
    }

    .VisitBoolExpr = (context : BoolExprContext -> v : Any) {
        r = Result{}
        context.t.Type == TrueLiteral ? {
            r.data = TargetTypeBool
            r.text = T
        }
        | context.t.Type == FalseLiteral ? {
            r.data = TargetTypeBool
            r.text = F
        }
        <- r
    }

    .VisitAnnotationSupport = (context : AnnotationSupportContext -> v : Any) {
        <- Visit(context.annotation()) ! Str
    }

    .VisitAnnotation = (context : AnnotationContext -> v : Any) {
        obj = ""

        r = Visit(context.annotationList()) ! Str
        r <> "" ? {
            obj += r
        }
        <- obj
    }

    .VisitAnnotationList = (context : AnnotationListContext -> v : Any) {
        obj = ""
        context.annotationItem() @ [i]v {
            txt = me.Visit(v) ! Str
            txt <> "" ? {
                obj += txt
            }
        }
        <- obj
    }

    .VisitAnnotationItem = (context : AnnotationItemContext -> v : Any) {
        obj = ""
        id = ""
        
        context.id().Length == 2 ? {
            id = "\{(Visit(context.id(0)) ! Result).text}:"
            obj += (me.Visit(context.id(1)) ! Result).text
        }
        | ? {
            obj += (me.Visit(context.id(0)) ! Result).text
        }
        obj == 
        | "get" ? {
            context.lambda() == nil ? {
                me.self_property_variable = true
                me.self_property_content.Append( "get{return _\{ me.self_property_ID }; }")
            }
            | ? {
                me.self_property_content.Append( "get{\{ me.VisitPropertyLambda(context.lambda(), true) }}")
            }
            <- ""
        }
        | "set" ? {
            context.lambda() == nil ? {
                me.self_property_variable = true
                me.self_property_content.Append( "set{_\{ me.self_property_ID }=value;}")
            }
            | ? {
                me.self_property_content.Append( "set{\{ me.VisitPropertyLambda(context.lambda(), false) }}")
            }
            <- ""
        }
        | "get_" ? {
            context.lambda() == nil ? {
                me.self_property_variable = true
                me.self_property_content.Append( "private get{return _\{ me.self_property_ID }; }")
            }
            | ? {
                me.self_property_content.Append( "private get{\{ me.VisitPropertyLambda(context.lambda(), true) }}")
            }
            <- ""
        }
        | "set_" ? {
            context.lambda() == nil ? {
                me.self_property_variable = true
                me.self_property_content.Append( "private set{_\{ me.self_property_ID }=value;}")
            }
            | ? {
                me.self_property_content.Append( "private set{\{ me.VisitPropertyLambda(context.lambda(), false) }}")
            }
            <- ""
        }
        | "add" ? {
            Todo("not yet")
            <- ""
        }
        | "remove" ? {
            Todo("not yet")
            <- ""
        }
        
        context.tuple() <> nil ? {
            obj += (me.Visit(context.tuple()) ! Result).text
        }
        | context.lambda() <> nil ? {
            obj += "(\{ (me.Visit(context.lambda()) ! Result).text })"
        }
        | ? {
            obj += ""
        }
        id <> "" ? {
            obj = id + obj
        }
        obj = "[" + obj + "]"
        <- obj
    }

    VisitPropertyLambda = (context : LambdaContext, is_get : Bool -> v : Str) {
        me.Add_current_set()
        obj = ""
        context.lambdaIn() <> nil ? {
            me.VisitPropertyLambdaIn(context.lambdaIn(), is_get)
        }

        context.tupleExpression() <> nil ? {
            obj += (Visit(context.tupleExpression()) ! Result).text
            is_get ? {
                obj = "return " + obj
            }
            obj += Terminate
        }
        | ? {
            obj += ProcessFunctionSupport(context.functionSupportStatement())
        }
        me.get_ID = ""
        me.set_ID = ""
        me.Delete_current_set()
        <- obj
    }

    VisitPropertyLambdaIn = (context : LambdaInContext, is_get : Bool ->) {
        context.id().Length == 
        | 1 ? {
            id0 = me.Visit(context.id(0)) ! Result
            me.Add_ID(id0.text)
            is_get ? {
                me.self_property_variable = true
                me.Add_ID("_"+me.self_property_ID)
                me.get_ID = id0.text
            }
            | ? {
                me.set_ID = id0.text
            }
        }
        | 2 ? {
            me.self_property_variable = true
            me.Add_ID("_"+me.self_property_ID)
            id0 = me.Visit(context.id(0)) ! Result
            id1 = me.Visit(context.id(1)) ! Result
            me.Add_ID(id0.text)
            me.Add_ID(id1.text)
            me.get_ID = id0.text
            me.set_ID = id1.text
        }
    }
}
